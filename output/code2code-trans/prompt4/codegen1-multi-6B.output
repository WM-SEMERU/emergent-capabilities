public int getVcenter() {return field_1_vcenter;}
public void addAll(BlockList<T> src) {if (src.size == 0)return;int srcDirIdx = 0;for (; srcDirIdx < src.tailDirIdx; srcDirIdxpublic void addAll(BlockList<T> src) {if (src.size == 0)return;int srcDirIdx = 0;for (; srcDirIdx < src.tailDirIdx; srcDirIdx++)addAll(src.directory[srcDirIdx], 0, BLOCK_SIZE);if (src.tailBlkIdx!= 0)addAll(src.tailBlock, 0, src.tailBlkIdx);}}
public void writeByte(byte[] b) {if (b.length > blockSize) {throw new IllegalArgumentException("block size is " + blockSize + ", but length of array is " + b.length);}if (public void writeByte(byte[] b) {if (b.length > blockSize) {throw new IllegalArgumentException("block size is " + blockSize + ", but length of array is " + b.length);}if (upto + b.length > blockSize) {if (currentBlock!= null) {addBlock(currentBlock);}currentBlock = new byte[blockSize];upto = 0;}System.arraycopy(b, 0, currentBlock, upto, b.length);upto += b.length;}
public void setObjectId(ObjectId objectId) {this.objectId = objectId;}
public DeleteDomainEntryResult executeDeleteDomainEntry(DeleteDomainEntryRequest request) {
public long ramBytesUsed(long[] ramBytesUsed) {
public final String getFullMessage(int offset) {byte[] raw = buffer;int msgB = RawParseUtils.tagMessage(raw, offset);if (msgB < 0) {return ""; }return RawParseUtils.decode(guessEncoding(), raw, msgB, raw.length);}
public POIFSFileSystem(boolean bigBlockSize) {
public void init(int address, int length) {slice = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT];assert slice!= null;upto = address & ByteBlockPool.BYTE_BLOCK_MASK;offset0 = address;assert upto + length <= slice.length;}
public SubmoduleAddCommand setPath(String path, boolean force) {this.path = path;this.force = force;return this;}
public ListIngestionsResult listIngestions(ListIngestionsRequest request) {
public QueryParserTokenManager(CharStream stream){
public GetShardIteratorResult executeGetShardIterator(GetShardIteratorRequest request) {
public ModifyStrategyRequest(String vip_id, String strategy_id, String strategy_name, String strategy_type, String strategy_status, String strategy_desc, String strategy_price, String strategy_start_time,public ModifyStrategyRequest(String vip_id, String strategy_id, String strategy_name, String strategy_type, String strategy_status, String strategy_desc, String strategy_price, String strategy_start_time, String strategy_end_time, String strategy_create_time, String strategy_update_time) {super("aegis", "2016-11-11", "ModifyStrategy", "vipaegis");setMethod(MethodType.POST);
public void close() throws IOException {synchronized (lock) {if (in!= null) {in.close();}if (bytes!= null) {bytes.close();}}}
public void setOptRecord(EscherOptRecord optRecord) {_optRecord = optRecord;}
//public int read(byte[] buffer, int offset, int length) {if (buffer == null) {throw new NullPointerException("buffer == null");}Arrays.checkOffsetAndCount(buffer.length, offset, length//public int read(byte[] buffer, int offset, int length) {if (buffer == null) {throw new NullPointerException("buffer == null");}Arrays.checkOffsetAndCount(buffer.length, offset, length);if (length == 0) {return 0;}int copylen = count - pos < length? count - pos : length;for (int i = 0; i < copylen; i++) {buffer[offset + i] = (byte) this.buffer.charAt(pos + i);}pos += copylen;return copylen;}
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp, boolean isDictionaryBased) {this.sentenceOp = sentenceOp; this.isDictionaryBased = isDictionaryBased;}
public void print(Object obj) {write(obj!= null? obj.toString() : String.valueOf((Object) null));}
public NotImplementedFunctionException(String functionName, NotImplementedException cause) {super(functionName, cause);this.functionName = functionName;}
public V previous() {return super.previousEntry().getValue();}
//
public TagQueueResult executeTagQueue(TagQueueRequest request) {
public void remove() {throw new UnsupportedOperationException();}
public CacheSubnetGroup executeModifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) {
public String getParams() {return language + "," + country + "," + variant;}
public DeleteDocumentationVersionResult executeDeleteDocumentationVersion(DeleteDocumentationVersionRequest request) {
public int hashCode() {
public GetInstanceAccessDetailsResult executeGetInstanceAccessDetails(GetInstanceAccessDetailsRequest request) {
//public HSSFPolygon createPolygon(HSSFChildAnchor anchor) {HSSFPolygon shape = new HSSFPolygon(this, anchor);shape.setParent(this);shape.setAnchor(anchor);shapes.add(shape);onCreate(shape);return shape;}
public int getSheetIndex(String sheetName) {return getBoundSheetRec(sheetName).getSheetIndex();}
public static class GetDashboardRequestBuilder extends RequestBuilderBase<GetDashboardRequest, GetDashboardResult> {
public AssociateSigninDelegateGroupsWithAccountResult associateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) {
public void addMultipleBlanks(MulBlankRecord mbr) {for (int j = 0; j < mbr.getNumColumns(); j++) {BlankRecord br = new BlankRecord();br.setColumn(( short ) (j + mbr.getFirstColumn()));br.setRow(mbr.getRow());br.setXFIndex(mbr.getXFAt(j));insertCell(br);}}
public static String unquote(String string) {StringBuilder sb = new StringBuilder();int k = string.indexOf("\\Q");while (k >= 0) {sb.append(string.substring(0, k)).append(string.substring(k + 2));k = string.indexOf("\\E", k + 2);}return sb.toString();}
public ByteBuffer putInt(int index, int value) {throw new ReadOnlyBufferException();}
//public ArrayPtg(Object[][] values2d) {int nColumns = values2d[0].length;int nRows = values2d.length;_nColumns = (short) nColumns//public ArrayPtg(Object[][] values2d) {int nColumns = values2d[0].length;int nRows = values2d.length;_nColumns = (short) nColumns;_nRows = (short) nRows;Object[] vv = new Object[_nColumns * _nRows];for (int r=0; r<nRows; r++) {Object[] rowData//public ArrayPtg(Object[][] values2d) {int nColumns = values2d[0].length;int nRows = values2d.length;_nColumns = (short) nColumns//public ArrayPtg(Object[][] values2d) {int nColumns = values2d[0].length;int nRows = values2d.length;_nColumns = (short) nColumns;_nRows = (short) nRows;Object[] vv = new Object[_nColumns * _nRows];for (int r=0; r<nRows; r++) {Object[] rowData = values2d[r];for (int c=0; c<nColumns; c++) {vv[getValueIndex(c, r)] = rowData[c];}}_arrayValues = vv;_reserved
public GetIceServerConfigResult executeGetIceServerConfig(GetIceServerConfigRequest request) {
public String getValueAsString() {return "";}
public String toString() {return "ToChildBlockJoinQuery ("+parentQuery.toString()+")";}
public final void decRef() {refCount.decrementAndGet();}
public UpdateConfigurationSetSendingEnabledResult executeUpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) {
public int getNextXBATChainOffset(int block) {return getXBATEntriesPerBlock() * block;}
public void multiplyByPowerOfTen(int pow10) {TenPower tp = TenPower.getInstance(Math.abs(pow10));if (pow10 < 0) {mulShift(tp._divisor, tp._divisorShift);} else {mulShift(tp._multiplicand, tp._multiplierShift);}}
public static void main(String[] args){new File(".").listFiles();}
public InstanceProfileCredentialsProvider withRoleName(String roleName) {this.roleName = roleName;return this;}
public void setProgressMonitor(ProgressMonitor pm) {
public void reset() {if (!first()) {ptr = 0;if (!eof())parseEntry();}}
public E previousOrDefault(E defaultValue) {if (iterator.previousIndex() >= start) {return iterator.previous();}return defaultValue;}
public void setNewPrefix(String newPrefix) {this.newPrefix = newPrefix;}
public int indexOfValue(int value) {
public List<CharsRef> stem(char word[], int length) {List<CharsRef> stems = new ArrayList<>();for (int i = 0; i < length; i++) {stems.add(stem(word, i));}return stems;}
public GetGatewayResponsesResult executeGetGatewayResponses(GetGatewayResponsesRequest request) {
public long getPosition() {return currentBlockIndex * blockSize + currentBlockUpto;}
public long skip(long n) {return skip(n);}
BootstrapActionDetail(BootstrapActionDetail other) {
public void deserialize(LittleEndianInput in) {field_1_row = in.readShort();field_2_col = in.readShort();field_3_flags = in.readShort();field_4_public void deserialize(LittleEndianInput in) {field_1_row = in.readShort();field_2_col = in.readShort();field_3_flags = in.readShort();field_4_shapeid = in.readShort();field_6_author = StringUtil.getUnicodeLE(in, in.readShort());field_5_hasMultibyte = in.readByte() == 1;ifpublic void deserialize(LittleEndianInput in) {field_1_row = in.readShort();field_2_col = in.readShort();field_3_flags = in.readShort();field_4_public void deserialize(LittleEndianInput in) {field_1_row = in.readShort();field_2_col = in.readShort();field_3_flags = in.readShort();field_4_shapeid = in.readShort();field_6_author = StringUtil.getUnicodeLE(in, in.readShort());field_5_hasMultibyte = in.readByte() == 1;if (field_5_hasMultibyte) {field_6_author = StringUtil.getUnicode(in);} else {field_6_author = StringUtil.getCompressedUnicode(in
public int lastIndexOf(String string, int count) {
public boolean add(E object, int index) {return addImpl(object, index);}
public void unsetSection(ConfigSnapshot src, String section, String subsection) {
public final void setTagName(String value) {tagName = value;}
public void addSubRecord(SubRecord element) {subrecords.add(element);}
public void clear() {synchronized (mutex) {delegate().clear();}}
public static class DoubleMetaphoneFilter extends TokenFilter {
public long inCoreLength() {
public boolean getValue() {return value;}
public Pair(ContentSource oldSource, ContentSource newSource) {this.oldSource = oldSource;this.newSource = newSource;}
public int get(int i) {
public CreateRepoRequest(String uriPattern, String method) {super("cr", "2016-06-07", "CreateRepo", "cr");setUriPattern(uriPattern);setMethod(method);}
public void setDeltaBaseAsOffset(boolean deltaBaseAsOffset) {this.deltaBaseAsOffset = deltaBaseAsOffset;}
public void remove(int index) {if (expectedModCount == list.modCount) {if (index < 0 || index >= list.size) {throw new IndexOutOfBoundsException();}if (lastLink!= null)public void remove(int index) {if (expectedModCount == list.modCount) {if (index < 0 || index >= list.size) {throw new IndexOutOfBoundsException();}if (lastLink!= null) {Link<ET> next = lastLink.next;Link<ET> previous = lastLink.previous;next.previous = previous;previous.next = next;if (index == pos) {pos--;link =public void remove(int index) {if (expectedModCount == list.modCount) {if (index < 0 || index >= list.size) {throw new IndexOutOfBoundsException();}if (lastLink!= null)public void remove(int index) {if (expectedModCount == list.modCount) {if (index < 0 || index >= list.size) {throw new IndexOutOfBoundsException();}if (lastLink!= null) {Link<ET> next = lastLink.next;Link<ET> previous = lastLink.previous;next.previous = previous;previous.next = next;if (index == pos) {pos--;link = previous;lastLink = null;expectedModCount++;list.size--;list.modCount++;} else {throw new IndexOutOfBoundsException();}} else {throw new IllegalStateException();}} else {throw new ConcurrentMod
public MergeShardsResult executeMergeShards(MergeShardsRequest mergeShardsRequest) {
public AllocateHostedConnectionResult executeAllocateHostedConnection(AllocateHostedConnectionRequest request) {
public int getEndIndex() {return end;}
public static final WeightedTerm[] getTerms(Query query, boolean useStopWords){
public ByteBuffer put(byte[] src, int offset, int length) {throw new ReadOnlyBufferException();}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++]public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 2;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) |public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++]public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 2;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >>> 6);values[valuesOffset++
//
public void deleteNotebookInstanceLifecycleConfig(DeleteNotebookInstanceLifecycleConfigRequest request) {request = beforeClientExecution(request);}
public void setAccessKeySecret(String value) {this.accessKeySecret = value;}
public CreateVpnConnectionResult executeCreateVpnConnection(CreateVpnConnectionRequest request) {
public static class DescribeVoicesRequestBuilder extends RequestBuilderBase<DescribeVoicesRequest, DescribeVoicesResult, DescribeVoicesRequestBuilder> {
public ListMonitoringExecutionsResult executeListMonitoringExecutions(ListMonitoringExecutionsRequest request) {
public void setVaultName(String value) {
public void setEscherRecord(int index, EscherRecord escherRecord){escherRecords.set(index, escherRecord);}
public GetApisResult executeGetApis(GetApisRequest request) {
public DeleteSmsChannelResult executeDeleteSmsChannel(DeleteSmsChannelRequest request) {
public void setTrackingRefUpdate(TrackingRefUpdate trackingRefUpdate) {this.trackingRefUpdate = trackingRefUpdate;}
public void print(char c) {print(String.valueOf(c));}
public QueryNode getChild(int index) {return getChildren().get(index);}
public int getIndex() {return index;}
public void write(RecordOutputStream out) {out.writeShort(field_1_formatFlags);}
public GetThumbnailRequest(String authenticationKey, String clientId) {super("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto");setAuthenticationKey(authenticationKey);setClientId(clientId);}
public static class DescribeTransitGatewayVpcAttachmentsRequestBuilder extends RequestBuilderBase<DescribeTransitGatewayVpcAttachmentsRequest, DescribeTransitGatewayVpcAttachmentsResult, DescribeTransitGatewayVpcAttachmentsRequestBuilder> {
public static class PutVoiceConnectorStreamingConfigurationRequestBuilder extends RequestBuilderBase<PutVoiceConnectorStreamingConfigurationRequest, PutVoiceConnectorStreamingConfigurationResult, PutVoiceConnectorStreamingConfigurationRequestBuilder> {
public OrdRange getOrdRange(String dim, int prefix) {return prefixToOrdRange.get(dim, prefix);}
// This code is written in Java. Reproduce the same exact code in C#.
public E peekFirst() {return peekFirstImpl();}
public CreateWorkspacesResult createWorkspaces(CreateWorkspacesRequest request) {
public NumberFormatIndexRecord copy() {
