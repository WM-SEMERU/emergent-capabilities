public void deserialize(LittleEndianInput in) {field_1_vcenter = in.readShort();}
public void addAll(BlockList<T> src, int srcDirIdx, int srcBlkIdx) {if (src.size == 0)return;int srcDirIdx = 0;for (; srcDirIdpublic void addAll(BlockList<T> src, int srcDirIdx, int srcBlkIdx) {if (src.size == 0)return;int srcDirIdx = 0;for (; srcDirIdx < src.tailDirIdx; srcDirIdx++)addAll(src.directory[srcDirIdx], srcDirIdx, srcBlkIdx);if (src.tailBlkIdx!= 0)addAll(src.tailBlock, srcDirIdx, srcBlkIdx);}
public void writeByte(byte b, int offset) {if (upto == blockSize) {if (currentBlock!= null) {addBlock(currentBlock);}currentBlock = new byte[blockSize];upto = 0;}currentBlock[upto++] = b;upto = offset;}
public void setObjectId(ObjectId objectId) {this.objectId = objectId;}
public DeleteDomainEntryResult executeDeleteDomainEntry(DeleteDomainEntryRequest request,
public long getTermOffsetsRamBytesUsed() {return ((termOffsets!=null)? termOffsets.ramBytesUsed() : 0);}
public final String getFullMessage(int offset) {byte[] raw = buffer;int msgB = RawParseUtils.tagMessage(raw, offset);if (msgB < 0) {return ""; }return RawParseUtils.decode(guessEncoding(), raw, msgB, raw.length);}
public POIFSFileSystem(boolean b) {this(b, true);}
public void init(int address, int length) {slice = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT];assert slice!= null;upto = address & ByteBlockPool.BYTE_BLOCK_MASK;offset0 = address;assert upto < slice.length;offset1 = address + length;}
public SubmoduleAddCommand setPath(String path, String path2) {this.path = path;this.path2 = path2;return this;}
public ListIngestionsResult executeListIngestions(ListIngestionsRequest request,
@Override public void ReInit(CharStream stream) {
public GetShardIteratorResult executeGetShardIterator(GetShardIteratorRequest request,
public ModifyStrategyRequest(String method, String url, String methodName, String methodParams, String methodBody, String methodHeaders, String methodCookies, String methodHeadersCookies, String methodCookiesHeaders,public ModifyStrategyRequest(String method, String url, String methodName, String methodParams, String methodBody, String methodHeaders, String methodCookies, String methodHeadersCookies, String methodCookiesHeaders, String methodCookiesHeaders, String methodCookiesHeadersCookies, String methodCookiesHeadersCookies) {super(method, url, methodName, methodParams, methodBody, methodHeaders, methodCookies,public ModifyStrategyRequest(String method, String url, String methodName, String methodParams, String methodBody, String methodHeaders, String methodCookies, String methodHeadersCookies, String methodCookiesHeaders,public ModifyStrategyRequest(String method, String url, String methodName, String methodParams, String methodBody, String methodHeaders, String methodCookies, String methodHeadersCookies, String methodCookiesHeaders, String methodCookiesHeaders, String methodCookiesHeadersCookies, String methodCookiesHeadersCookies) {super(method, url, methodName, methodParams, methodBody, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeadpublic ModifyStrategyRequest(String method, String url, String methodName, String methodParams, String methodBody, String methodHeaders, String methodCookies, String methodHeadersCookies, String methodCookiesHeaders,public ModifyStrategyRequest(String method, String url, String methodName, String methodParams, String methodBody, String methodHeaders, String methodCookies, String methodHeadersCookies, String methodCookiesHeaders, String methodCookiesHeaders, String methodCookiesHeadersCookies, String methodCookiesHeadersCookies) {super(method, url, methodName, methodParams, methodBody, methodHeaders, methodCookies,public ModifyStrategyRequest(String method, String url, String methodName, String methodParams, String methodBody, String methodHeaders, String methodCookies, String methodHeadersCookies, String methodCookiesHeaders,public ModifyStrategyRequest(String method, String url, String methodName, String methodParams, String methodBody, String methodHeaders, String methodCookies, String methodHeadersCookies, String methodCookiesHeaders, String methodCookiesHeaders, String methodCookiesHeadersCookies, String methodCookiesHeadersCookies) {super(method, url, methodName, methodParams, methodBody, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders, methodCookies, methodHeaders,
public int read() throws IOException {synchronized (lock) {if (in == null) {throw new IOException("InputStreamReader is closed");}try {return in.read();} catch (IOException e) {return -1;}}
public void setOptRecord(EscherOptRecord optRecord) {_optRecord = optRecord;}
public synchronized int read(byte[] buffer) {if (buffer == null) {throw new NullPointerException("buffer == null");}Arrays.checkOffsetAndCount(buffer.length, 0, buffer.length);if (bufferpublic synchronized int read(byte[] buffer) {if (buffer == null) {throw new NullPointerException("buffer == null");}Arrays.checkOffsetAndCount(buffer.length, 0, buffer.length);if (buffer.length == 0) {return 0;}int copylen = count - pos < buffer.length? count - pos : buffer.length;for (int i = 0; i < copylen; i++) {buffer[i] = (byte) this.buffer.charAt(pos + i);}pos += copylen;return copylen;}
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp, int breakPos) {this.sentenceOp = sentenceOp; this.breakPos = breakPos;}
public void print(String str, int i) {write(str!= null? str : String.valueOf((Object) null));}
public NotImplementedFunctionException(String functionName) {super(functionName);this.functionName = functionName;}
public V previous() {return super.previousEntry().getValue();}
public final void readBytes(byte[] b, int offset, int len) throws IOException {int available = bufferLength - bufferPosition;if(len <= available){if(len>0) System.arraycopy(buffer, bufferPositionpublic final void readBytes(byte[] b, int offset, int len) throws IOException {int available = bufferLength - bufferPosition;if(len <= available){if(len>0) System.arraycopy(buffer, bufferPosition, b, offset, len);bufferPosition+=len;} else {if(available > 0){System.arraycopy(buffer, bufferPosition, b, offset, available);offset += available;len -= available;bufferPosition += available;}ifpublic final void readBytes(byte[] b, int offset, int len) throws IOException {int available = bufferLength - bufferPosition;if(len <= available){if(len>0) System.arraycopy(buffer, bufferPositionpublic final void readBytes(byte[] b, int offset, int len) throws IOException {int available = bufferLength - bufferPosition;if(len <= available){if(len>0) System.arraycopy(buffer, bufferPosition, b, offset, len);bufferPosition+=len;} else {if(available > 0){System.arraycopy(buffer, bufferPosition, b, offset, available);offset += available;len -= available;bufferPosition += available;}if (useBuffer && len<bufferSize){refill();if(bufferLength<len){System.arraycopy(buffer, 0, b, offset, bufferLength);throw new EOFException("read past EOF: " + this);
public TagQueueResult executeTagQueue(TagQueueRequest request) {
public void remove(int index) {throw new UnsupportedOperationException();}
public CacheSubnetGroup executeModifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) {
public String getParams() {return super.getParams();}
public DeleteDocumentationVersionResult executeDeleteDocumentationVersion(DeleteDocumentationVersionRequest request,
public int hashCode() {int result = 0;for (int i = 0; i < length; i++) {result = 31 * result + components[i].hashCode();}}
public GetInstanceAccessDetailsResult executeGetInstanceAccessDetails(GetInstanceAccessDetailsRequest request,
public HSSFPolygon createPolygon(HSSFChildAnchor anchor, HSSFPolygon shape) {HSSFPolygon shape2 = new HSSFPolygon(this, anchor, shape);shape2.setParent(this);shape2.setAnchor(anchor);shapes.add(shape2);onCreate(shape2);return shape2;}
public String getSheetName(String sheetName) {return getBoundSheetRec(sheetName).getSheetname();}
public com.amazonaws.Response executeGetDashboard(GetDashboardRequest request) {
public AssociateSigninDelegateGroupsWithAccountResult executeAssociateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request,
public void addMultipleBlanks(MulBlankRecord mbr, int row, int col) {for (int j = 0; j < mbr.getNumColumns(); j++) {BlankRecord br = new BlankRecord();br.setColumn(( short ) (j + mbr.getFirstColumn()));br.setRow(row);br.setXFIndex(mbr.getXFAt(j));insertCell(br);}}
public static String quote(String string) {StringBuilder sb = new StringBuilder();sb.append("\"");int apos = 0;int k;while ((k = string.indexOf("\"", apos)) >= 0)public static String quote(String string) {StringBuilder sb = new StringBuilder();sb.append("\"");int apos = 0;int k;while ((k = string.indexOf("\"", apos)) >= 0) {sb.append(string.substring(apos, k + 1)).append("\"");apos = k + 1;}return sb.append(string.substring(apos)).append("\"").toString();}
public ByteBuffer putInt(int value, int position) {throw new ReadOnlyBufferException();}
public ArrayPtg(int nColumns, int nRows, Object[] values2d) {_nColumns = nColumns;_nRows = nRows;_arrayValues = values2d;}
public GetIceServerConfigResult executeGetIceServerConfig(GetIceServerConfigRequest request, com.amazonaws.handlers.AsyncHandler<GetIceServerConfigRequest, GetIceServerConfigResult> asyncHandler) {
public String getClassName() {return getClass().getName();}
public String toString() {return "ToChildBlockJoinQuery";}
public final void decRef() {refCount.decrementAndGet();}
// You can use it to execute Java api in C#.
public int getNextXBATChainOffset() {return getXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE;}
public void multiplyByPowerOfTen(int pow10, int divisor) {mulShift(pow10, divisor);}
public String toString(){final StringBuilder b = new StringBuilder();final int          l = length();b.append(File.separatorChar);for (int i = 0; i < l; i++){b.append(getComponent(i));if (i < l - 1){b.append(File.separatorChar);}}return b.toString();}
public InstanceProfileCredentialsProvider withFetcher(ECSMetadataServiceCredentialsFetcher fetcher, String roleName) {this.fetcher = fetcher;this.fetcher.setRoleName(roleName);return this;}
public ProgressMonitor getProgressMonitor() {return progressMonitor;}
public void parseEntry() {if (ptr == 0) {ptr = parseEntry();} else {ptr = 0;}}
public E previous() {return iterator.previous();}
public void setNewPrefix(String newPrefix) {this.newPrefix = newPrefix;}
public int indexOfValue(int value, int fromIndex) {for (int i = fromIndex; i < mSize; i++)if (mValues[i] == value)return i;}
public List<CharsRef> uniqueStems(char word[], int length, boolean ignoreCase) {List<CharsRef> stems = stem(word, length, ignoreCase);if (stems.size() < 2)public List<CharsRef> uniqueStems(char word[], int length, boolean ignoreCase) {List<CharsRef> stems = stem(word, length, ignoreCase);if (stems.size() < 2) {return stems;}CharArraySet terms = new CharArraySet(8, ignoreCase);List<CharsRef> deduped = new ArrayList<>();for (CharsRef s : stems) {if (!terms.contains(s)) {deduped.add(s);terms.add(s);}}return deduped;}
public GetGatewayResponsesResult executeGetGatewayResponses(GetGatewayResponsesRequest request,
public long getPosition() {return currentBlockIndex << blockBits | currentBlockUpto;}
public long skip(long n) {int s = (int) Math.min(available(), Math.max(0, n));ptr += s;return s;}
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig, String bootstrapActionName) {setBootstrapActionConfig(bootstrapActionConfig);setBootstrapActionName(bootstrapActionName);}
public void deserialize(LittleEndianInput in) {field_1_row = in.readShort();field_2_col = in.readShort();field_3_flags = in.readShort();field_4_public void deserialize(LittleEndianInput in) {field_1_row = in.readShort();field_2_col = in.readShort();field_3_flags = in.readShort();field_4_shapeid = in.readShort();field_6_author.length();field_5_hasMultibyte = in.readByte() == 0x01;if (field_5_hasMultibyte) {fieldpublic void deserialize(LittleEndianInput in) {field_1_row = in.readShort();field_2_col = in.readShort();field_3_flags = in.readShort();field_4_public void deserialize(LittleEndianInput in) {field_1_row = in.readShort();field_2_col = in.readShort();field_3_flags = in.readShort();field_4_shapeid = in.readShort();field_6_author.length();field_5_hasMultibyte = in.readByte() == 0x01;if (field_5_hasMultibyte) {field_6_author = StringUtil.getUnicodeLE(in);} else {field_6_author = StringUtil.getCompressedUnicode(in);}if (field_7_padding!= null)
public int lastIndexOf(String string, int count) {
public boolean addLast(E object) {return addLastImpl(object);}
public ConfigSnapshot unsetSection(ConfigSnapshot src, String section, String subsection) {
public final String getTagNameC() {return tagNameC;}
public SubRecord getSubRecord(int index) {return subrecords.get(index);}
public boolean removeAll(Collection c) {synchronized (mutex) {return delegate().removeAll(c);}}
public DoubleMetaphoneFilter create(TokenStream input, int maxCodeLength) {return new DoubleMetaphoneFilter(input, maxCodeLength, inject);}
public long inCoreLength() {return inCoreLength;}
public boolean getValue() {return value;}
public ContentSource getOldSource() {return oldSource;}
public int get(int i, int j) {if (count <= i)throw new ArrayIndexOutOfBoundsException(i);return entries[i];}
public CreateRepoRequest(String uriPattern, String method, String name, String description, String homepage, String homepageUrl, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlpublic CreateRepoRequest(String uriPattern, String method, String name, String description, String homepage, String homepageUrl, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlpublic CreateRepoRequest(String uriPattern, String method, String name, String description, String homepage, String homepageUrl, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlpublic CreateRepoRequest(String uriPattern, String method, String name, String description, String homepage, String homepageUrl, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlpublic CreateRepoRequest(String uriPattern, String method, String name, String description, String homepage, String homepageUrl, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlpublic CreateRepoRequest(String uriPattern, String method, String name, String description, String homepage, String homepageUrl, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlpublic CreateRepoRequest(String uriPattern, String method, String name, String description, String homepage, String homepageUrl, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlpublic CreateRepoRequest(String uriPattern, String method, String name, String description, String homepage, String homepageUrl, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrl
public boolean isDeltaBaseAsOffset() {return deltaBaseAsOffset;}
public void remove(int index) {if (expectedModCount == list.modCount) {if (index < 0 || index >= list.size) {throw new IndexOutOfBoundsException();}} else {if (index == pospublic void remove(int index) {if (expectedModCount == list.modCount) {if (index < 0 || index >= list.size) {throw new IndexOutOfBoundsException();}} else {if (index == pos) {if (lastLink!= null) {Link<ET> next = lastLink.next;Link<ET> previous = lastLink.previous;next.previous = previous;previous.next = next;if (lastpublic void remove(int index) {if (expectedModCount == list.modCount) {if (index < 0 || index >= list.size) {throw new IndexOutOfBoundsException();}} else {if (index == pospublic void remove(int index) {if (expectedModCount == list.modCount) {if (index < 0 || index >= list.size) {throw new IndexOutOfBoundsException();}} else {if (index == pos) {if (lastLink!= null) {Link<ET> next = lastLink.next;Link<ET> previous = lastLink.previous;next.previous = previous;previous.next = next;if (lastLink == link) {pos--;}link = previous;lastLink = null;expectedModCount++;list.size--;list.modCount++;} else {throw new ConcurrentModificationException();}}}} else {throw new Concurrent
public MergeShardsResult executeMergeShards(MergeShardsRequest request) {
// C# to Java conversion does not preserve the exact signature of the generated C# code,
public int getEndIndex() {return end;}
public static final WeightedTerm[] getTerms(Query query, boolean includeInferred){return getTerms(query,includeInferred,false);}
public ByteBuffer duplicate() {throw new ReadOnlyBufferException();}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations, int blockSize) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations, int blockSize) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 2;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3)public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations, int blockSize) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations, int blockSize) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 2;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >>> 6);values
public String getHumanishName() {return getHumanishName();}
public static DescribeNotebookInstanceLifecycleConfigResult executeDescribeNotebookInstanceLifecycleConfig(com.amazonaws.services.ecr.AmazonECR.executeDelayedRequest clientRequest) {
public String getAccessKeySecret() {return this.accessKeySecret;}
// You can also call the C# to execute Java from the Java client.
// You can improve C# code by using the C#->Java->C# compiler from Oracle
public ListMonitoringExecutionsResult executeListMonitoringExecutions(ListMonitoringExecutionsRequest request,
public DescribeJobRequest() {
public void setEscherRecord(int index, EscherRecord escherRecord){escherRecords.set(index, escherRecord);}
public GetApisResult executeGetApis(GetApisRequest request, AsyncHandler<GetApisRequest, GetApisResult> asyncHandler) {assert(asyncHandler!= null);execute(request, new GetApisResultJsonProcessor(asyncHandler));return null;}
public com.amazonaws.Response executeDeleteSmsChannel(DeleteSmsChannelRequest request) {
public void setTrackingRefUpdate(TrackingRefUpdate trackingRefUpdate) {
public void print(char c) {print(String.valueOf(c));}
public void setChild(QueryNode child) {
public NotIgnoredFilter(int workdirTreeIndex, int workdirIndex) {this.index = workdirTreeIndex;this.workdirIndex = workdirIndex;}
public void write(RecordOutputStream out) {out.writeShort(field_1_formatFlags);}
public GetThumbnailRequest(String url, String thumbnailUrl, String thumbnailUrlType, String thumbnailUrlType2, String thumbnailUrlType3, String thumbnailUrlType4, String thumbnailUrlType5, String thumbnailUrlType6, String thumbnailUrlpublic GetThumbnailRequest(String url, String thumbnailUrl, String thumbnailUrlType, String thumbnailUrlType2, String thumbnailUrlType3, String thumbnailUrlType4, String thumbnailUrlType5, String thumbnailUrlType6, String thumbnailUrlType7, String thumbnailUrlType8, String thumbnailUrlType9, String thumbnailUrlType10, String thumbnailUrlType11, String thumbnailUrlType12, String thumbnailUrlType13, String thumbnailUrlType14, String thumbnailUrlType15public GetThumbnailRequest(String url, String thumbnailUrl, String thumbnailUrlType, String thumbnailUrlType2, String thumbnailUrlType3, String thumbnailUrlType4, String thumbnailUrlType5, String thumbnailUrlType6, String thumbnailUrlpublic GetThumbnailRequest(String url, String thumbnailUrl, String thumbnailUrlType, String thumbnailUrlType2, String thumbnailUrlType3, String thumbnailUrlType4, String thumbnailUrlType5, String thumbnailUrlType6, String thumbnailUrlType7, String thumbnailUrlType8, String thumbnailUrlType9, String thumbnailUrlType10, String thumbnailUrlType11, String thumbnailUrlType12, String thumbnailUrlType13, String thumbnailUrlType14, String thumbnailUrlType15, String thumbnailUrlType16, String thumbnailUrlType17, String thumbnailUrlType18, String thumbnailUrlType19, String thumbnailUrlType20, String thumbnailUrlType21, String thumbnailUrlType22, String thumbnailUrlType23, Stringpublic GetThumbnailRequest(String url, String thumbnailUrl, String thumbnailUrlType, String thumbnailUrlType2, String thumbnailUrlType3, String thumbnailUrlType4, String thumbnailUrlType5, String thumbnailUrlType6, String thumbnailUrlpublic GetThumbnailRequest(String url, String thumbnailUrl, String thumbnailUrlType, String thumbnailUrlType2, String thumbnailUrlType3, String thumbnailUrlType4, String thumbnailUrlType5, String thumbnailUrlType6, String thumbnailUrlType7, String thumbnailUrlType8, String thumbnailUrlType9, String thumbnailUrlType10, String thumbnailUrlType11, String thumbnailUrlType12, String thumbnailUrlType13, String thumbnailUrlType14, String thumbnailUrlType15public GetThumbnailRequest(String url, String thumbnailUrl, String thumbnailUrlType, String thumbnailUrlType2, String thumbnailUrlType3, String thumbnailUrlType4, String thumbnailUrlType5, String thumbnailUrlType6, String thumbnailUrlpublic GetThumbnailRequest(String url, String thumbnailUrl, String thumbnailUrlType, String thumbnailUrlType2, String thumbnailUrlType3, String thumbnailUrlType4, String thumbnailUrlType5, String thumbnailUrlType6, String thumbnailUrlType7, String thumbnailUrlType8, String thumbnailUrlType9, String thumbnailUrlType10, String thumbnailUrlType11, String thumbnailUrlType12, String thumbnailUrlType13, String thumbnailUrlType14, String thumbnailUrlType15, String thumbnailUrlType16, String thumbnailUrlType17, String thumbnailUrlType18, String thumbnailUrlType19, String thumbnailUrlType20, String thumbnailUrlType21, String thumbnailUrlType22, String thumbnailUrlType23, String thumbnailUrlType24, String thumbnailUrlType25, String thumbnailUrlType26, String thumbnailUrlType27, String thumbnailUrlType28, String thumbnailUrlType29, String thumbnailUrlType30, String thumbnailUrlType31, String thumbnailUrl
public com.amazonaws.Response executeDescribeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest describeTransitGatewayVpcAttachmentsRequest) {
// It just calls execute().
public OrdRange getOrdRange(String dim, String ord) {return prefixToOrdRange.get(dim, ord);}
public String toStringC() {String symbol = "";if (startIndex >= 0 && startIndex < getInputStream().size()) {symbol = getInputStream().getText(Interval.of(startIndex,startIndex));public String toStringC() {String symbol = "";if (startIndex >= 0 && startIndex < getInputStream().size()) {symbol = getInputStream().getText(Interval.of(startIndex,startIndex));symbol = Utils.escapeWhitespace(symbol, false);}return String.format(Locale.getDefault(), "%s('%s')", LexerNoViableAltException.class.getSimpleName(), symbol);}
public E peekFirst() {return peekFirstImpl();}
// You can use it from Java code as long as the JavaBeans framework is not used.
public NumberFormatIndexRecord copy() {return new NumberFormatIndexRecord(this);}
