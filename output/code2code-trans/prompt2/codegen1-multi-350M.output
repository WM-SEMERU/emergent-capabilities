public void deserialize(DataInput in) {field_1_vcenter=in.readShort();}
public void addAll(BlockList<T> src, int srcDirIdx, int srcBlkIdx) {if (src.size == 0)return;int srcDirIdx = 0;for (; srcDirIdx < src.tailDirIdx; srcDirIdx++)addAll(src.directory[srcDirIdx], srcDirIdx, srcBlkIdx);if (src.tailBlkIdx!= 0)addAll(src.tailBlock, srcDirIdx, srcBlkIdx);}
}
public void setObjectId(ObjectId objectId) {this.objectId = objectId;}
// The interface to delete a domain entry.
public long getTermOffsets() {return termOffsets;}
public final String getFullMessage(int offset, int length) {byte[] raw = buffer;int msgB = RawParseUtils.tagMessage(raw, offset);if (msgB < 0) {return ""; }return RawParseUtils.decode(guessEncoding(), raw, msgB, offset + msgB);}
public POIFSFileSystem(boolean b) {this(b, true);}
public void next() {upto++;}
public SubmoduleAddCommand setPath(java.lang.String path) {this.path = path;return this;}
// The interface used to list the ingestion results.
public QueryParserTokenManager(CharStream stream){SwitchTo(RULE_STATEMENT); SwitchTo(START_STATE);}
// public com.amazonaws.services.elasticache.model.GetShardIteratorResult executeGetShardIterator(GetShardIteratorRequest request) {
public ModifyStrategyRequest(String method, String url, String id, String name, String description, String status, String status_description, String status_url, String status_url_description, String status_url_description_url, String status_url_description_url_url, String status_url_description_url_url_url, String status_url_description_url_url_url_url, String status_url_description_url_url_url_url_url, String status_url_description_url_url_url_url_url_url, String status_url_description_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_url_
}
public void setOptRecord(EscherOptRecord optRecord) {_optRecord = optRecord;}
public synchronized int read(byte[] buffer) {if (buffer == null) {throw new NullPointerException("buffer == null");}Arrays.checkOffsetAndCount(buffer.length, 0, buffer.length);if (buffer.length == 0) {return 0;}int copylen = count - pos < buffer.length? count - pos : buffer.length;for (int i = 0; i < copylen; i++) {buffer[i] = (byte) this.buffer.charAt(pos + i);}pos += copylen;return copylen;}
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp, NLPSentenceDetectorOp sentenceOp2) {this.sentenceOp = sentenceOp;this.sentenceOp2 = sentenceOp2;}
public void println(String str) {write(str!= null? str : String.valueOf((Object) null));}
public NotImplementedFunctionException(String functionName, NotImplementedException cause, String message) {super(functionName, cause, message);this.functionName = functionName;}
}
public final void readInternal(byte[] b, int offset, int len) throws IOException {int available = bufferLength - bufferPosition;if(len <= available){if(len>0) System.arraycopy(buffer, bufferPosition, b, offset, len);bufferPosition+=len;} else {if(available > 0){System.arraycopy(buffer, bufferPosition, b, offset, available);offset += available;len -= available;bufferPosition += available;}if (useBuffer && len<bufferSize){refill();if(bufferLength<len){System.arraycopy(buffer, 0, b, offset, bufferLength);throw new EOFException("read past EOF: " + this);} else {System.arraycopy(buffer, 0, b, offset, len);bufferPosition=len;}} else {long after = bufferStart+bufferPosition+len;if(after > length())throw new EOFException("
/*
public void remove(int index) {throw new UnsupportedOperationException();}
/*
public String getParams() {return super.getParams();}
public class DeleteDocumentationVersionResult
public int hashCode() {int result = 0;for (int i = 0; i < length; i++) {result = 31 * result + components[i].hashCode();}}
// The interface used to invoke the operation.
public HSSFPolygon createPolygon(HSSFChildAnchor anchor, HSSFPolygon shape) {HSSFPolygon shape2 = new HSSFPolygon(this, anchor, shape);shape2.setParent(this);shape2.setAnchor(anchor);shapes.add(shape2);onCreate(shape2);return shape2;}
public String getSheetName(String sheetName) {return getBoundSheetRec(sheetName).getSheetname();}
// The interface to the GetDashboard service.
/*
public void addMultipleBlanks(MulBlankRecord mbr, int row) {for (int j = 0; j < mbr.getNumColumns(); j++) {BlankRecord br = new BlankRecord();br.setColumn(( short ) (j + mbr.getFirstColumn()));br.setRow(row);br.setXFIndex(mbr.getXFAt(j));insertCell(br);}}
public static String quote(String string, int start, int end) {StringBuilder sb = new StringBuilder();sb.append("\\Q");int apos = 0;int k;while ((k = string.indexOf("\\E", apos)) >= 0) {sb.append(string.substring(apos, k + 2)).append("\\\\E\\Q");apos = k + 2;}return sb.append(string.substring(apos, start)).append("\\E").toString();}
public ByteBuffer putInt(int value, int offset) {throw new ReadOnlyBufferException();}
public int getNColumns() {return _nColumns;} public void setNColumns(int nColumns) {_nColumns = nColumns;} public int getNRows() {return _nRows;} public void setNRows(int nRows) {_nRows = nRows;} public short getReserved0Int() {return _reserved0Int;} public void setReserved0Int(short reserved0Int) {_reserved0Int = reserved0Int;} public short getReserved1Short() {return _reserved1Short;} public void setReserved1Short(short reserved1Short) {_reserved1Short = reserved1Short;} public short getReserved2Byte() {return _reserved2Byte;} public void setReserved2Byte(short reserved2Byte) {_reserved2Byte = reserved2Byte;} public Object[] getArrayValues() {return _arrayValues;} public void setArrayValues(Object[] arrayValues) {_arrayValues = arrayValues;} public int getReserved0() {return _reserved0Int;} public void setReserved0(int reserved0) {_reserved0Int = reserved0;} public int getReserved1() {return _reserved1Short;} public void setReserved1(int reserved1) {_reserved1Short = reserved1;} public int get
// The Java Client API for the Apache Ice Server.
}
public String toString() {return "ToChildBlockJoinQuery ("+parentQuery.toString()+")";}
public final void decRef() {refCount.decrementAndGet();}
/*
public int getNextXBATChainOffset(int xbadex) {return LittleEndianConsts.INT_SIZE * xbadex;}
public void multiplyByPowerOfTen(int pow10, int pow102) {TenPower tp = TenPower.getInstance(Math.abs(pow10));if (pow10 < 0) {mulShift(tp._divisor, tp._divisorShift);} else {mulShift(tp._multiplicand, tp._multiplierShift);}}
public String toString(int i){final StringBuilder b = new StringBuilder();final int          l = length();b.append(File.separatorChar);for (int i = 0; i < l; i++){b.append(getComponent(i));if (i < l - 1){b.append(File.separatorChar);}}return b.toString();}
public InstanceProfileCredentialsProvider withFetcher(ECSMetadataServiceCredentialsFetcher fetcher, String roleName) {this.fetcher = fetcher;this.fetcher.setRoleName(roleName);return this;}
public ProgressMonitor getProgressMonitor() {return progressMonitor;}
public void parseEntry() {
public E next() {if (iterator.nextIndex() >= start) {return iterator.next();}throw new NoSuchElementException();}
public void setNewPrefix(String newPrefix) {this.newPrefix = newPrefix;}
public int indexOfValue(int value, int start) {for (int i = start; i < mSize; i++)if (mValues[i] == value)return i;}
public List<CharsRef> uniqueStems(char word[], int length, boolean ignoreCase) {List<CharsRef> stems = stem(word, length, ignoreCase);if (stems.size() < 2) {return stems;}CharArraySet terms = new CharArraySet(8, dictionary.ignoreCase);List<CharsRef> deduped = new ArrayList<>();for (CharsRef s : stems) {if (!terms.contains(s)) {deduped.add(s);terms.add(s);}}return deduped;}
/*
public void setPosition(int pos) {currentBlockIndex = (int) (pos >> blockBits);currentBlock = blocks[currentBlockIndex];currentBlockUpto = (int) (pos & blockMask);}
public long available() {return (long) (ptr - start);}
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig, BootstrapActionDetail detail) {setBootstrapActionConfig(bootstrapActionConfig);setDetail(detail);}
public void deserialize(LittleEndianInput in) {field_1_row = in.readShort();field_2_col = in.readShort();field_3_flags = in.readShort();field_4_shapeid = in.readShort();field_6_author.length();field_5_hasMultibyte = in.readByte()==0x01;if (field_5_hasMultibyte) {field_6_author = StringUtil.getUnicodeLE(in);} else {field_6_author = StringUtil.getCompressedUnicode(in);}if (field_7_padding!= null) {field_7_padding = new ByteArrayOutputStream();in.readByte();} }
public int lastIndexOf(String string, int count) {
public boolean addLast(E object) {return addLastImpl(object);}
public void unsetSection(ConfigSnapshot src, String section, String subsection) {
public final void setTagName(String tagName) {this.tagName = tagName;}
public void addSubRecord(int index, SubRecord element, int offset) {subrecords.add(index, element, offset);}
public boolean removeAll(Collection c) {synchronized (mutex) {return delegate().removeAll(c);}}
}
public long inCoreLength() {return inCoreLength;}
public boolean getValue() {return value;}
public Pair(ContentSource oldSource, ContentSource newSource, ContentSource newSource2) {this.oldSource = oldSource;this.newSource = newSource;this.newSource2 = newSource2;}
public int get(int i, int j) {if (count <= i)throw new ArrayIndexOutOfBoundsException(i);return entries[i] + j;}
public CreateRepoRequest(String uri, String name, String description, String homepage, String homepageUrl, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String homepageUrlPattern, String
public void setDeltaBaseAsOffset(boolean deltaBaseAsOffset) {this.deltaBaseAsOffset = deltaBaseAsOffset;}
public void add(ET e) {if (expectedModCount == list.modCount) {if (lastLink!= null) {Link<ET> next = lastLink.next;Link<ET> previous = lastLink.previous;next.previous = previous;previous.next = next;if (lastLink == link) {pos++;;}link = previous;lastLink = null;expectedModCount++;list.size++;list.modCount++;}} else {throw new ConcurrentModificationException();}}
// The interface to the C#-style call MergeShardsResult::Result.
/*
public int getEndIndex() {return end;}
public static final WeightedTerm[] getTerms(Query query, boolean includeInferred){return getTerms(query,includeInferred,false);}
public ByteBuffer compact(int length) {throw new ReadOnlyBufferException();}
}}
public String getPath() throws IllegalArgumentException {String s = getPath();if ("/".equals(s) || "".equals(s)) s = getHost();if (s == null) throw new IllegalArgumentException();String[] elements;if ("file".equals(scheme) || LOCAL_FILE.matcher(s).matches()) elements = s.split("[\\" + File.separatorChar + "/]"); elseelements = s.split("/+"); if (elements.length == 0)throw new IllegalArgumentException();String result = elements[elements.length - 1];if (Constants.DOT_GIT.equals(result))result = elements[elements.length - 2];else if (result.endsWith(Constants.DOT_GIT_EXT))result = result.substring(0, result.length()- Constants.DOT_GIT_EXT.length());return result;}
//  Execute executes the request.
public void setAccessKeySecret(String accessKeySecret) {this.accessKeySecret = accessKeySecret;}
// public com.azure.resourcemanager.network.NetworkManager manager() {
// The interface to the DescribeVoices service
// ExecuteAsync - executes the specified list of monitoring executions in parallel.
public DescribeJobRequest(JsonReader jsonReader) throws IOException {
public void setEscherRecord(int index, EscherRecord escherRecord){escherRecords.set(index, escherRecord);}
// The interface for the GetApisResult service.
// The interface for deleting a SMS channel.
public void setTrackingRefUpdate(TrackingRefUpdate trackingRefUpdate) {
public void print(char c) {print(String.valueOf(c));}
public void setChild(QueryNode child) {getChildren().set(0, child);}
public NotIgnoredFilter(int workdirTreeIndex, int workdirIndex) {this.index = workdirTreeIndex;this.workdirIndex = workdirIndex;}
public void write(DataOutputStream out) throws IOException {out.writeShort(field_1_formatFlags);}
public GetThumbnailRequest(String photoId, String thumbnailId) {super("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto");setPhotoId(photoId);setThumbnailId(thumbnailId);setProtocol(ProtocolType.HTTPS);}
//  Sets the VPC attachment for the transit gateway.
/*
