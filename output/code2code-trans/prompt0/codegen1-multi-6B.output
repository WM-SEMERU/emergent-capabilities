public void serialize(LittleEndianOutput out) {out.writeShort(field_1_vcenter);}
public void addAll(BlockList<T> src) {if (src.size == 0)return;int srcDirIdx = 0;for (; srcDirIdx < src.tailDirIdx; srcDirIdx++)addAll(src.directory[srcDirIdx], 0, BLOCK_SIZE);if (src.tailBlkIdx!= 0)addAll(src.tailBlock, 0, src.tailBlkIdx);}
public void writeByte(byte b, int offset) {if (offset >= blockSize) {if (currentBlock!= null) {addBlock(currentBlock);}currentBlock = new byte[blockSize];offset = 0;}currentBlock[offset++] = b;}
public ObjectId getObjectId() {return objectId;}
public DeleteDomainEntryResult deleteDomainEntry(DeleteDomainEntryRequest request) {
public long ramBytesUsed(IndexReader r) {return ((termOffsets!=null)? termOffsets.ramBytesUsed(r) : 0) +((termsDictOffsets!=null)? termsDictOffsets.ramBytesUsed(r) : 0);}
public final String getFullMessage() {byte[] raw = buffer;int msgB = RawParseUtils.tagMessage(raw, 0);if (msgB < 0) {return ""; }return RawParseUtils.decode(guessEncoding(), raw, msgB, raw.length);}
public POIFSFileSystem(boolean bigBlockSize) {this(bigBlockSize, true);_header.setBATCount(1);_header.setBATArray(new int[]{1});BATBlock bb = BATBlock.createEmptyBATBlock(bigBlockSize, false);bb.setOurBlockIndex(1);_bat_blocks.add(bb);setNextBlock(0, POIFSConstants.END_OF_CHAIN);setNextBlock(1, POIFSConstants.FAT_SECTOR_BLOCK);_property_table.setStartBlock(0);}
public void init(int address, int length) {slice = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT];assert slice!= null;upto = address & ByteBlockPool.BYTE_BLOCK_MASK;offset0 = address;assert upto + length <= slice.length;}
public SubmoduleAddCommand setPath(String path, boolean force) {this.path = path;this.force = force;return this;}
public ListIngestionsResult listIngestions(ListIngestionsRequest request) {
public QueryParserTokenManager(CharStream stream){
public GetShardIteratorResult executeGetShardIterator(GetShardIteratorRequest request) {
public ModifyStrategyRequest(String vip_id, String strategy_id, String strategy_name, String strategy_type, String strategy_status, String strategy_desc, String strategy_price, String strategy_start_time, String strategy_end_time, String strategy_create_time, String strategy_update_time) {super("aegis", "2016-11-11", "ModifyStrategy", "vipaegis");setMethod(MethodType.POST);
public boolean ready() throws IOException {synchronized (lock) {if (in == null) {throw new IOException("InputStreamReader is closed");}try {return bytes.hasRemaining() || in.available() > 0;} catch (IOException e) {return false;}}}
public EscherOptRecord getOptRecord(boolean create) {
public synchronized int read(char[] buffer, int offset, int length) {if (buffer == null) {throw new NullPointerException("buffer == null");}Arrays.checkOffsetAndCount(buffer.length, offset, length);if (length == 0) {return 0;}int copylen = count - pos < length? count - pos : length;for (int i = 0; i < copylen; i++) {buffer[offset + i] = this.buffer.charAt(pos + i);}pos += copylen;return copylen;}
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp, boolean isTokenized) {this.sentenceOp = sentenceOp; this.isTokenized = isTokenized;}
public void print(Object obj) {write(obj!= null? obj.toString() : String.valueOf((Object) null));}
public NotImplementedFunctionException(String functionName, NotImplementedException cause, String message) {super(functionName, cause, message);this.functionName = functionName;}
public V next() {return super.nextEntry().getValue();}
public final void readBytes(byte[] b, int offset, int len) throws IOException {readBytes(b, offset, len, true);}
public TagQueueResult tagQueue(TagQueueRequest request) {
public void remove() {throw new UnsupportedOperationException();}
public CacheSubnetGroup modifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) {
public void setParams(String params) {super.setParams(params);language = country = variant = "";StringTokenizer st = new StringTokenizer(params, ",");if (st.hasMoreTokens())language = st.nextToken();if (st.hasMoreTokens())country = st.nextToken();if (st.hasMoreTokens())variant = st.nextToken();}
public DeleteDocumentationVersionResult deleteDocumentationVersion(DeleteDocumentationVersionRequest deleteDocumentationVersionRequest) {
public boolean equals(Object obj) {if (!(obj instanceof FacetLabel)) {return false;}FacetLabel other = (FacetLabel) obj;if (length!= other.length) {return false; }for (int i = length - 1; i >= 0; i--) {if (!components[i].equals(other.components[i])) {return false;}}return true;}
public GetInstanceAccessDetailsResult executeGetInstanceAccessDetails(GetInstanceAccessDetailsRequest request) {
public HSSFPolygon createPolygon(HSSFChildAnchor anchor, boolean isClosed) {HSSFPolygon shape = new HSSFPolygon(this, anchor, isClosed);shape.setParent(this);shape.setAnchor(anchor);shapes.add(shape);onCreate(shape);return shape;}
public int getSheetIndex(String sheetName) {return getBoundSheetRec(sheetName).getSheetIndex();}
public GetDashboardResult executeGetDashboard(GetDashboardRequest request) {
public AssociateSigninDelegateGroupsWithAccountResult executeAssociateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) {
public void addMultipleBlanks(MulBlankRecord mbr, int firstColumn, int lastColumn) {for (int j = firstColumn; j <= lastColumn; j++) {BlankRecord br = new BlankRecord();br.setColumn(( short ) (j + mbr.getFirstColumn()));br.setRow(mbr.getRow());br.setXFIndex(mbr.getXFAt(j));insertCell(br);}}
public static String quote(String string) {StringBuilder sb = new StringBuilder();int apos = 0;int k;while ((k = string.indexOf("\\", apos)) >= 0) {sb.append(string.substring(apos, k)).append("\\").append("\\Q");apos = k + 1;}return sb.append(string.substring(apos)).append("\\").toString();}
public ByteBuffer putInt(int index, int value) {throw new ReadOnlyBufferException();}
public ArrayPtg(Object[][] values2d, int reserved0Int, short reserved1Short, byte reserved2Byte) {int nColumns = values2d[0].length;int nRows = values2d.length;_nColumns = (short) nColumns;_nRows = (short) nRows;Object[] vv = new Object[_nColumns * _nRows];for (int r=0; r<nRows; r++) {Object[] rowData = values2d[r];for (int c=0; c<nColumns; c++) {vv[getValueIndex(c, r)] = rowData[c];}}_arrayValues = vv;_reserved0Int = reserved0Int;_reserved1Short = reserved1Short;_reserved2Byte = reserved2Byte;}
public GetIceServerConfigResult executeGetIceServerConfig(GetIceServerConfigRequest request) {
public String toString() {return getClass().getName() + " [" +getValueAsString() +"]";}
public String toString(String field) {return "ToChildBlockJoinQuery ("+parentQuery.toString()+")";}
public final void decRef() {refCount.decrementAndGet();}
public UpdateConfigurationSetSendingEnabledResult updateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) {
public int getNextXBATChainOffset() {return getXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE;}
public void multiplyByPowerOfTen(int pow10) {TenPower tp = TenPower.getInstance(Math.abs(pow10));if (pow10 < 0) {mulShift(tp._divisor, tp._divisorShift);} else {mulShift(tp._multiplicand, tp._multiplierShift);}}
public String toString(){final StringBuilder b = new StringBuilder();final int          l = length();for (int i = 0; i < l; i++){b.append(getComponent(i));if (i < l - 1){b.append(File.separatorChar);}}return b.toString();}
public InstanceProfileCredentialsProvider withFetcher(ECSMetadataServiceCredentialsFetcher fetcher, String roleName) {this.fetcher = fetcher;this.fetcher.setRoleName(roleName);return this;}
public void setProgressMonitor(ProgressMonitor pm) {
public void reset() {if (!first()) {ptr = 0;if (!eof())parseEntry();}}
public E previous() {if (iterator.previousIndex() >= start) {return iterator.previous();}throw new NoSuchElementException();}
public String getNewPrefix() {return this.newPrefix;}
public int indexOfValue(int value) {for (int i = 0; i < mSize; i++)if (mValues[i] == value)return i;return -1;}
public List<CharsRef> uniqueStems(char word[], int length) {List<CharsRef> stems = stem(word, length);if (stems.size() < 2) {return stems;}CharArraySet terms = new CharArraySet(8, dictionary.ignoreCase);List<CharsRef> deduped = new ArrayList<>();for (CharsRef s : stems) {if (!terms.contains(s)) {deduped.add(s);terms.add(s);}}return deduped;}
public GetGatewayResponsesResult executeGetGatewayResponses(GetGatewayResponsesRequest request) {
public void setPosition(long pos) {currentBlockIndex = (int) (pos >> blockBits);currentBlock = blocks[currentBlockIndex];currentBlockUpto = (int) (pos & blockMask);}
public long skip(long n) {int s = (int) Math.min(available(), Math.max(0, n));ptr += s;return s;}
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig, String id) {setBootstrapActionConfig(bootstrapActionConfig); setId(id);}
public void serialize(LittleEndianOutput out) {out.writeShort(field_1_row);out.writeShort(field_2_col);out.writeShort(field_3_flags);out.writeShort(field_4_shapeid);out.writeShort(field_6_author.length());out.writeByte(field_5_hasMultibyte? 0x01 : 0x00);if (field_5_hasMultibyte) {StringUtil.putUnicodeLE(field_6_author, out);} else {StringUtil.putCompressedUnicode(field_6_author, out);}if (field_7_padding!= null) {out.writeByte(field_7_padding.intValue());}}
public int lastIndexOf(String string, int start) {
public boolean add(E object, int index) {return addImpl(object, index);}
public void unsetSection(String section, String subsection) {ConfigSnapshot src, res;do {src = state.get();res = unsetSection(src, section, subsection);} while (!state.compareAndSet(src, res));}
public final String getTagName() {return tagName;}
public void addSubRecord(SubRecord element) {subrecords.add(element);}
public boolean removeAll(Collection<?> c) {synchronized (mutex) {return delegate().removeAll(c);}}
public DoubleMetaphoneFilter create(TokenStream input, int maxCodeLength, boolean inject) {return new DoubleMetaphoneFilter(input, maxCodeLength, inject);}
public long length() {return inCoreLength();}
public boolean getValue() {return value;}
public Pair(ContentSource oldSource, ContentSource newSource) {
public int get(int i) {if (count <= i)throw new ArrayIndexOutOfBoundsException(i);return entries[i];}
public CreateRepoRequest(String repoName, String description, String homepage, String privateRepo, String gitUrl, String gitUsername, String gitPassword, String gitEmail, String gitPrivateKey, String gitPublicKey, String gitPrivateKeyPassphrase, String gitPublicKeyPassphrase, String gitPrivateKeyPassphraseType, String gitPublicKeyPassphraseType, String gitPrivateKeyType, String gitPublicKeyType, String gitPrivateKeyPassphraseFile, String gitPublicKeyPassphraseFile, String gitPrivateKeyPassphraseFileType, String gitPublicKeyPassphraseFileType, String gitPrivateKeyFile, String gitPublicKeyFile, String gitPrivateKeyFileType, String gitPublicKeyFileType) {
public boolean isDeltaBaseAsOffset() {return deltaBaseAsOffset;}
public void remove() {if (expectedModCount == list.modCount) {if (lastLink!= null) {Link<ET> next = lastLink.next;Link<ET> previous = lastLink.previous;next.previous = previous;previous.next = next;if (lastLink == link) {pos--;}link = previous;lastLink = null;expectedModCount++;list.size--;list.modCount++;} else {throw new IllegalStateException();}} else {throw new ConcurrentModificationException();}}
public MergeShardsResult mergeShards(MergeShardsRequest request) {
public AllocateHostedConnectionResult allocateHostedConnection(AllocateHostedConnectionRequest request) {
public int getEndIndex() {return end;}
public static final WeightedTerm[] getTerms(Query query, boolean useStopWords){
public ByteBuffer compact() {throw new ReadOnlyBufferException();}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 2;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >>> 6);final long byte3 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte3 & 63;}}
public String getHumanishNameCS() throws IllegalArgumentException {String s = getPathCS();if ("/".equals(s) || "".equals(s)) s = getHostCS();if (s == null) throw new IllegalArgumentException();String[] elements;if ("file".equals(scheme) || LOCAL_FILE.matcher(s).matches()) elements = s.split("[\\" + File.separatorChar + "/]"); elseelements = s.split("/+"); if (elements.length == 0)throw new IllegalArgumentException();String result = elements[elements.length - 1];if (Constants.DOT_GIT.equals(result))result = elements[elements.length - 2];else if (result.endsWith(Constants.DOT_GIT_EXT))result = result.substring(0, result.length()- Constants.DOT_GIT_EXT.length());return result;}
public DescribeNotebookInstanceLifecycleConfigResult executeDescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest describeNotebookInstanceLifecycleConfigRequest) {
public String getAccessKeySecret() {return this.accessKeySecret;}
public CreateVpnConnectionResult createVpnConnection(CreateVpnConnectionRequest request) {
public DescribeVoicesResult executeDescribeVoices(DescribeVoicesRequest describeVoicesRequest) {
public ListMonitoringExecutionsResult executeListMonitoringExecutions(ListMonitoringExecutionsRequest request) {
public DescribeJobRequest(String vaultName, String jobId, String startDate, String endDate) {setVaultName(vaultName);setJobId(jobId);setStartDate(startDate);setEndDate(endDate);}
public EscherRecord getEscherRecord(int index){return escherRecords.get(index);}
public GetApisResult getApis(GetApisRequest request) {
public DeleteSmsChannelResult executeDeleteSmsChannel(DeleteSmsChannelRequest deleteSmsChannelRequest) {
public TrackingRefUpdate getTrackingRefUpdate(String trackingRefUpdate) {return trackingRefUpdate;}
public void print(char c) {print(String.valueOf(c));}
public QueryNode getChild() {return getChildren().get(0);}
public NotIgnoredFilter(int workdirTreeIndex, boolean isCaseSensitive) {this.index = workdirTreeIndex; this.isCaseSensitive = isCaseSensitive;}
public void setFormatFlags(short formatFlags) {field_1_formatFlags = formatFlags;}
public GetThumbnailRequest(String apiKey, String secretKey) {super("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto", apiKey, secretKey);setProtocol(ProtocolType.HTTPS);}
public DescribeTransitGatewayVpcAttachmentsResult executeDescribeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest describeTransitGatewayVpcAttachmentsRequest) {
public PutVoiceConnectorStreamingConfigurationResult putVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request, AWSCaller awsCaller) {request = beforeClientExecution(request);return executePutVoiceConnectorStreamingConfiguration(request, awsCaller);}
