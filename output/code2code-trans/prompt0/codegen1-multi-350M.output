public void deserialize(final LittleEndianInput in) {field_1_vcenter = in.readShort();}
public void addAll(int srcDirIdx, int srcBlkIdx, int srcBlkSize) {if (srcBlkSize == 0)return;int srcDirIdx = 0;for (; srcDirIdx < srcBlkIdx; srcDirIdx++)addAll(src.directory[srcDirIdx], 0, srcBlkSize);if (srcBlkIdx!= 0)addAll(src.tailBlock, 0, srcBlkIdx);}
public void writeShort(short s) {if (upto == blockSize) {if (currentBlock!= null) {addBlock(currentBlock);}currentBlock = new short[blockSize];upto = 0;}currentBlock[upto++] = s;}
public ObjectId getObjectId() {return objectId;}
//
public long ramBytesUsed() {return ((termOffsets!=null)? termOffsets.ramBytesUsed() : 0) +((termsDictOffsets!=null)? termsDictOffsets.ramBytesUsed() : 0);}
public final String getFullMessage(int offset) {byte[] raw = buffer;int msgB = RawParseUtils.tagMessage(raw, offset);if (msgB < 0) {return ""; }return RawParseUtils.decode(guessEncoding(), raw, msgB, raw.length);}
public POIFSFileSystem(boolean b) {this(b, true);_header.setBATCount(1);_header.setBATArray(new int[]{1});BATBlock bb = BATBlock.createEmptyBATBlock(bigBlockSize, false);bb.setOurBlockIndex(1);_bat_blocks.add(bb);setNextBlock(0, POIFSConstants.END_OF_CHAIN);setNextBlock(1, POIFSConstants.FAT_SECTOR_BLOCK);_property_table.setStartBlock(0);}
public void init(int address, int size) {slice = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT];assert slice!= null;upto = address & ByteBlockPool.BYTE_BLOCK_MASK;offset0 = address;assert upto < slice.length;}
public SubmoduleAddCommand setPath(String path, String path2) {this.path = path;this.path2 = path2;return this;}
//
public QueryParserTokenManager(CharStream stream){if (listeners!= null)
//
public ModifyStrategyRequest(String method, String url, String id, String name, String description, String status, String status_description, String status_url, String status_url_description, String status_url_description, String status_url_url, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status_url_url_description, String status
public int read() throws IOException {synchronized (lock) {if (in == null) {throw new IOException("InputStreamReader is closed");}try {return in.read();} catch (IOException e) {return -1;}}}}
public void setOptRecord(EscherOptRecord optRecord) {
public synchronized int read(char[] buffer, int offset, int length) {if (buffer == null) {throw new NullPointerException("buffer == null");}Arrays.checkOffsetAndCount(buffer.length, offset, length);if (length == 0) {return 0;}int copylen = count - pos < length? count - pos : length;for (int i = 0; i < copylen; i++) {buffer[offset + i] = (char) this.buffer.charAt(pos + i);}pos += copylen;return copylen;}
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp, int breakPos) {this.sentenceOp = sentenceOp; breakPos = breakPos;}
public void print(String str, int i) {write(str!= null? str : String.valueOf((Object) null));}
public NotImplementedFunctionException(String functionName, NotImplementedException cause, String message) {super(functionName, cause, message);this.functionName = functionName;}
public V next() {return super.nextEntry().getValue();}
public final void readBytes(byte[] b, int offset, int len) throws IOException {int available = bufferLength - bufferPosition;if(len <= available){if(len>0) System.arraycopy(buffer, bufferPosition, b, offset, len);bufferPosition+=len;} else {if(available > 0){System.arraycopy(buffer, bufferPosition, b, offset, available);offset += available;len -= available;bufferPosition += available;}if (useBuffer && len<bufferSize){refill();if(bufferLength<len){System.arraycopy(buffer, 0, b, offset, bufferLength);throw new EOFException("read past EOF: " + this);} else {System.arraycopy(buffer, 0, b, offset, len);bufferPosition=len;}} else {long after = bufferStart+bufferPosition+len;if(after > length())throw new EOFException("read
//
public void remove(int index) {throw new UnsupportedOperationException();}
// all methods with the same name are generated by tools/generateCode.py
public String getParams() {return super.getParams();}
public DeleteDocumentationVersionResult executeDeleteDocumentationVersion(DeleteDocumentationVersionRequest request,
public int hashCode() {if (length!= 0) {return components[length - 1].hashCode();}return 0;}
//
public HSSFPolygon createPolygon(HSSFChildAnchor anchor, HSSFChildAnchor anchor2) {HSSFPolygon shape = new HSSFPolygon(this, anchor, anchor2);shape.setParent(this);shape.setAnchor(anchor);shapes.add(shape);onCreate(shape);return shape;}
public String getSheetName(int sheetIndex, int sheetIndex2) {return getBoundSheetRec(sheetIndex).getSheetname();}
//
public AssociateSigninDelegateGroupsWithAccountResult executeAssociateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request,
public void addMultipleBlanks(MulBlankRecord mbr, int row, int col) {for (int j = 0; j < mbr.getNumColumns(); j++) {BlankRecord br = new BlankRecord();br.setColumn(( short ) (j + mbr.getFirstColumn()));br.setRow(row);br.setXFIndex(mbr.getXFAt(j));insertCell(br);}}
public static String quote(String string) {StringBuilder sb = new StringBuilder();sb.append("\\Q");int apos = 0;int k;while ((k = string.indexOf("\\E", apos)) >= 0) {sb.append(string.substring(apos, k + 2)).append("\\\\E\\Q");apos = k + 2;}return sb.append(string.substring(apos)).append("\\E").toString();}
public ByteBuffer putInt(int value, int position) {throw new ReadOnlyBufferException();}
public ArrayPtg(int nColumns, int nRows, Object[] values2d) {int _nColumns = (short) nColumns;int _nRows = (short) nRows;Object[] vv = new Object[_nColumns * _nRows];for (int r=0; r<nRows; r++) {Object[] rowData = values2d[r];for (int c=0; c<nColumns; c++) {vv[getValueIndex(c, r)] = rowData[c];}}_arrayValues = vv;_reserved0Int = 0;_reserved1Short = 0;_reserved2Byte = 0;}
// all methods with the same name are generated by tools/generate-client-generated-methods.py
public String getClass().getName() {return "String";}
public String toString() {return "ToChildBlockJoinQuery ("+parentQuery.toString()+")";}
public final void decRef() {refCount.decrementAndGet();}
// all methods with the same name are overwritten by the generated code.
public int getNextXBATChainOffset() {return getXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE;}
public void multiplyByPowerOfTen(int pow10, int shift) {
public String toString(){final StringBuilder b = new StringBuilder();final int          l = length();b.append(File.separatorChar);for (int i = 0; i < l; i++){b.append(getComponent(i));if (i < l - 1){b.append(File.separatorChar);}}return b.toString();}
public InstanceProfileCredentialsProvider withRoleName(String roleName) {this.roleName = roleName;return this;}
public void setProgressMonitor(ProgressMonitor pm, int max) {
public void parseEntry() {
public E previous() {if (iterator.previousIndex() >= start) {return iterator.previous();}throw new NoSuchElementException();}
public String getNewPrefix() {return this.newPrefix;}
public int indexOfValue(int value, int start) {for (int i = start; i < mSize; i++)if (mValues[i] == value)return i;}
public List<CharsRef> uniqueStems(char word[], int length, boolean ignoreCase) {List<CharsRef> stems = stem(word, length, ignoreCase);if (stems.size() < 2) {return stems;}CharArraySet terms = new CharArraySet(8, dictionary.ignoreCase);List<CharsRef> deduped = new ArrayList<>();for (CharsRef s : stems) {if (!terms.contains(s)) {deduped.add(s);terms.add(s);}}return deduped;}
//
public void setPosition(int pos) {currentBlockIndex = (int) (pos >> blockBits);currentBlock = blocks[currentBlockIndex];currentBlockUpto = (int) (pos & blockMask);}
public long skip(long n) {int s = (int) Math.min(available(), Math.max(0, n));ptr += s;return s;}
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig, BootstrapActionConfig bootstrapActionConfig2) {setBootstrapActionConfig(bootstrapActionConfig);setBootstrapActionConfig(bootstrapActionConfig2);}
public void deserialize(LittleEndianInput in) {field_1_row = in.readShort();field_2_col = in.readShort();field_3_flags = in.readShort();field_4_shapeid = in.readShort();field_6_author.length();field_5_hasMultibyte = in.readByte()==0x01;if (field_5_hasMultibyte) {field_6_author = StringUtil.getUnicodeLE(in);} else {field_6_author = StringUtil.getCompressedUnicode(in);}if (field_7_padding!= null) {field_7_padding.intValue();} }
public int lastIndexOf(String string, int count) {
public boolean addLast(E object) {return addLastImpl(object);}
public ConfigSnapshot unsetSection(ConfigSnapshot src, String section, String subsection) {
public final String getTagName() {return tagName;}
public void addSubRecord(int index, SubRecord element, int subindex) {subrecords.add(index, element);}
public boolean removeAll(Collection c) {synchronized (mutex) {return delegate().removeAll(c);}}
public DoubleMetaphoneFilter create(TokenStream input, int maxCodeLength, boolean inject) {return new DoubleMetaphoneFilter(input, maxCodeLength, inject);}
public long inCoreLength() {return inCoreLength;}
public boolean getValue() {return value;}
public Pair(ContentSource oldSource, ContentSource newSource, int index) {this.oldSource = oldSource;this.newSource = newSource;this.index = index;}
public int get(int i, int j) {if (count <= i)throw new ArrayIndexOutOfBoundsException(i);return entries[i];}
public CreateRepoRequest(String uri, String name, String description, String owner, String repoType, String repoName, String repoDesc, String repoUrl, String repoBranch, String repoTag, String repoCommit, String repoCommitUrl, String repoCommitBranch, String repoCommitTag, String repoCommitCommitUrl, String repoCommitCommitBranch, String repoCommitCommitTag, String repoCommitCommitCommitUrl, String repoCommitCommitCommitBranch, String repoCommitCommitCommitTag, String repoCommitCommitCommitCommitUrl, String repoCommitCommitCommitCommitBranch, String repoCommitCommitCommitCommitTag, String repoCommitCommitCommitCommitCommitBranch, String repoCommitCommitCommitCommitCommitTag, String repoCommitCommitCommitCommitCommitBranch, String repoCommitCommitCommitCommitCommitTag, String repoCommitCommitCommitCommitCommitBranch, String repoCommitCommitCommitCommitCommitTag, String repoCommitCommitCommitCommitCommitBranch, String repoCommitCommitCommitCommitCommitTag, String repoCommitCommitCommitCommitCommitBranch, String repoCommitCommitCommitCommitCommitBranch, String repoCommitCommitCommitCommitCommitBranch, String repoCommitCommitCommitCommitCommitBranch, String repoCommitCommitCommitCommitCommitBranch, String repoCommitCommitCommitCommitCommitBranch, String repoCommitCommitCommitCommitCommitBranch, String repoCommitCommitCommitCommitCommitBranch, String repoComm
public boolean isDeltaBaseAsOffset() {return deltaBaseAsOffset;}
public boolean add(ET e) {if (expectedModCount == list.modCount) {if (lastLink!= null) {Link<ET> next = lastLink.next;Link<ET> previous = lastLink.previous;next.previous = previous;previous.next = next;if (lastLink == link) {pos++;;}link = previous;lastLink = null;expectedModCount++;list.size++;list.modCount++;}} else {throw new ConcurrentModificationException();}}
//
// allocating a hosted connection
public int getEndIndex() {return end;}
public static final WeightedTerm[] getTerms(Query query, boolean includeInferred){
public ByteBuffer duplicate() {throw new ReadOnlyBufferException();}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations, int blockSize) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 2;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >>> 6);values[valuesOffset++] = byte2 & 63;}}
public String getPath() throws IllegalArgumentException {String s = getScheme();if (s == null) throw new IllegalArgumentException();return s;}
//
public String getAccessKeySecret() {return this.accessKeySecret;}
//
//
//
public DescribeJobRequest() {};
public void setEscherRecord(int index, EscherRecord escherRecord){escherRecords.set(index, escherRecord);}
//
//
public void setTrackingRefUpdate(TrackingRefUpdate trackingRefUpdate) {this.trackingRefUpdate = trackingRefUpdate;}
public void print(char c) {print(String.valueOf(c));}
public void setChild(QueryNode child) {
public NotIgnoredFilter(int workdirTreeIndex, int workdirIndex) {this.index = workdirTreeIndex;this.workdirIndex = workdirIndex;}
public AreaRecord(int field_1_formatFlags) {this.field_1_formatFlags            = field_1_formatFlags;}
public GetThumbnailRequest(String photoId, String thumbnailId, String protocol) {super(photoId, thumbnailId, "GetThumbnail", "cloudphoto");setProtocol(protocol);}
//
// src/main/java/com/microsoft/azure/iothub/messaging/v1/PutVoiceConnectorStreamingConfigurationResult.java
public OrdRange getOrdRange(String dim, String ord) {return prefixToOrdRange.get(dim, ord);}
public String toString(String s) {String symbol = "";if (startIndex >= 0 && startIndex < getInputStream().size()) {symbol = getInputStream().getText(Interval.of(startIndex,startIndex));symbol = Utils.escapeWhitespace(symbol, false);}return String.format(Locale.getDefault(), "%s('%s')", LexerNoViableAltException.class.getSimpleName(), symbol);}
public E peekFirst() {return peekFirstImpl();}
//
public NumberFormatIndexRecord copy() {
