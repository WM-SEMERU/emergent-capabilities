public void deserialize(LittleEndianInput in) {field_1_vcenter=in.readShort();}
public void addAll(BlockList<T> src, int srcDirIdx, int srcBlkIdx) {if (src.size == 0)return;int srcDirIdx2 = srcDirIdx + 1;for (; srcDirIdx2 < src.tailDirIdx; srcDirIdx2++)addAll(src.directory[srcDirIdx2], srcDirIdx, srcBlkIdx);if (src.tailBlkIdx!= 0)addAll(src.tailBlock, srcDirIdx, srcBlkIdx);}
public void writeBytes(String s) {if (upto + s.length() > blockSize) {if (currentBlock!= null) {addBlock(currentBlock);}currentBlock = new byte[blockSize];upto = 0;}for (int i = 0; i < s.length(); i++) {currentBlock[upto++] = (byte)s.charAt(i);}}
public void setObjectId(ObjectId objectId) {this.objectId = objectId;}
public static DeleteDomainEntryResult executeDeleteDomainEntry(DeleteDomainEntryRequest request) {
public long ramBytesUsed() {return ((termOffsets!=null)? termOffsets.ramBytesUsed() : 0) +((termsDictOffsets!=null)? termsDictOffsets.ramBytesUsed() : 0);}
public final String getFullMessage() {byte[] raw = buffer;int msgB = RawParseUtils.tagMessage(raw, 0);if (msgB < 0) {return ""; }return RawParseUtils.decode(guessEncoding(), raw, msgB, raw.length);}
public POIFSFileSystem(boolean create) {this(create, true);}
public void init(int address, int length) {slice = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT];assert slice!= null;upto = address + length;offset0 = address;assert upto < slice.length;}
public SubmoduleAddCommand setPath(Path path) {this.path = path;return this;}
public ListIngestionsResult listIngestions(ListIngestionsRequest request, com.amazonaws.handlers.AsyncHandler<ListIngestionsRequest, ListIngestionsResult> asyncHandler) {
public QueryParserTokenManager(CharStream stream){
public static GetShardIteratorResult executeGetShardIterator(GetShardIteratorRequest getShardIteratorRequest) {
public ModifyStrategyRequest(String requestName) {super(requestName, "2016-11-11", "ModifyStrategy", "vipaegis");setMethod(MethodType.POST);}
public boolean ready() throws IOException {synchronized (lock) {if (in == null) {throw new IOException("InputStreamReader is closed");}try {return bytes.hasRemaining() || in.available() > 0;} catch (IOException e) {return false;}}}
public void setOptRecord(EscherOptRecord optRecord) {_optRecord = optRecord;}
public synchronized int read(char[] buffer, int offset, int length) {if (buffer == null) {throw new NullPointerException("buffer == null");}Arrays.checkOffsetAndCount(buffer.length, offset, length);if (length == 0) {return 0;}int copylen = count - pos < length? count - pos : length;for (int i = 0; i < copylen; i++) {buffer[offset + i] = (char) this.buffer.charAt(pos + i);}pos += copylen;return copylen;}
public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp, int maxSentenceLength) {this.sentenceOp = sentenceOp; this.maxSentenceLength = maxSentenceLength;}
public void print(Object obj) {write(obj!= null? obj.toString() : String.valueOf((Object) null));}
public NotImplementedFunctionException(String functionName, NotImplementedException cause, String message) {super(functionName, cause, message);this.functionName = functionName;}
public V previous() {return super.previousEntry().getValue();}
public final void readBytes(byte[] b, int offset, int len) throws IOException {readBytes(b, offset, len, true);}
public TagQueueResult tagQueue(TagQueueRequest request, AsyncHandler<TagQueueRequest, TagQueueResult> asyncHandler) {request = beforeClientExecution(request);
public void remove(int index) {throw new UnsupportedOperationException();}
public void modifyCacheSubnetGroupAsync(ModifyCacheSubnetGroupRequest request, com.amazonaws.handlers.AsyncHandler<ModifyCacheSubnetGroupRequest, CacheSubnetGroup> asyncHandler) {
public void setParams(String params, String language, String country, String variant) {super.setParams(params);this.language = language;this.country = country;this.variant = variant;}
public DeleteDocumentationVersionResult executeDeleteDocumentationVersion(DeleteDocumentationVersionRequest request) {
public int hashCode() {int hash = 0; for (int i = length - 1; i >= 0; i--) {hash = hash * 31 + components[i].hashCode();}}
public static GetInstanceAccessDetailsResult executeGetInstanceAccessDetails(GetInstanceAccessDetailsRequest request) {
public HSSFShape createShape(HSSFChildAnchor anchor) {HSSFShape shape = new HSSFShape(this, anchor);shape.setParent(this);shape.setAnchor(anchor);shapes.add(shape);onCreate(shape);return shape;}
public int getSheetIndex(String sheetName) {return getBoundSheetRec(sheetName).getSheetIndex();}
public GetDashboardResult getDashboard(String dashboardId) {
public AssociateSigninDelegateGroupsWithAccountResult executeAssociateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) {
public void addMultipleBlanks(MulBlankRecord mbr, int[] cols) {for (int j = 0; j < mbr.getNumColumns(); j++) {BlankRecord br = new BlankRecord();br.setColumn(( short ) (cols[j] + mbr.getFirstColumn()));br.setRow(mbr.getRow());br.setXFIndex(mbr.getXFAt(j));insertCell(br);}}
public static String quote(String string, char quote) {StringBuilder sb = new StringBuilder();sb.append(quote);int apos = 0;int k;while ((k = string.indexOf(quote, apos)) >= 0) {sb.append(string.substring(apos, k + 1)).append(quote).append(quote);apos = k + 1;}return sb.append(string.substring(apos)).append(quote).toString();}
public ByteBuffer putInt(int index, int value) {throw new ReadOnlyBufferException();}
public ArrayPtg(Object[][] values2d, int nColumns, int nRows) {_nColumns = (short) nColumns;_nRows = (short) nRows;_arrayValues = new Object[_nColumns * _nRows];for (int r=0; r<nRows; r++) {Object[] rowData = values2d[r];for (int c=0; c<nColumns; c++) {_arrayValues[getValueIndex(c, r)] = rowData[c];}}_reserved0Int = 0;_reserved1Short = 0;_reserved2Byte = 0;}
public GetIceServerConfigResult getIceServerConfig(String iceServerConfigId) {request = new GetIceServerConfigRequest();request.iceServerConfigId = iceServerConfigId;return executeGetIceServerConfig(request);}
public String getValueAsString() {return value;}
public String toString() {return "ToChildBlockJoinQuery ("+parentQuery.toString()+")";}
public final void decRef() {
public UpdateConfigurationSetSendingEnabledResult executeUpdateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest updateConfigurationSetSendingEnabledRequest) {
public int getNextXBATChainOffset() {return getXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE;}
public void multiplyByPowerOfTen(int pow10, int[] result) {TenPower tp = TenPower.getInstance(Math.abs(pow10));if (pow10 < 0) {mulShift(tp._divisor, tp._divisorShift, result);} else {mulShift(tp._multiplicand, tp._multiplierShift, result);}}
public String toString(){final StringBuilder b = new StringBuilder();final int          l = length();b.append(File.separatorChar);for (int i = 0; i < l; i++){b.append(getComponent(i));if (i < l - 1){b.append(File.separatorChar);}}return b.toString();}
public InstanceProfileCredentialsProvider withFetcher(ECSMetadataServiceCredentialsFetcher fetcher, String roleName) {this.fetcher = fetcher;this.fetcher.setRoleName(roleName);return this;}
public void setProgressMonitor(ProgressMonitor pm, int max) {
public void reset(String filename) {if (!first()) {ptr = 0;if (!eof())parseEntry();}}
public E previous() {if (iterator.previousIndex() >= start) {return iterator.previous();}throw new NoSuchElementException();}
public String getNewPrefix(String oldPrefix) {return this.newPrefix;}
public int indexOfValue(int value) {for (int i = 0; i < mSize; i++)if (mValues[i] == value)return i;return -1;}
public List<CharsRef> uniqueStems(char word[], int length, Set<CharsRef> dictionary) {List<CharsRef> stems = stem(word, length);if (stems.size() < 2) {return stems;}CharArraySet terms = new CharArraySet(8, dictionary.ignoreCase);List<CharsRef> deduped = new ArrayList<>();for (CharsRef s : stems) {if (!terms.contains(s)) {deduped.add(s);terms.add(s);}}return deduped;}
public static GetGatewayResponsesResult executeGetGatewayResponses(GetGatewayResponsesRequest request) {
public void setPosition(long pos) {currentBlockIndex = (int) (pos >> blockBits);currentBlock = blocks[currentBlockIndex];currentBlockUpto = (int) (pos & blockMask);}
public int available() {return (int) (buf.length - ptr);}
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig, String version) {setBootstrapActionConfig(bootstrapActionConfig);setVersion(version);}
public void serialize(ByteArrayOutputStream out) {
public int lastIndexOf(String string, int start) {
public boolean addAll(Collection<? extends E> collection) {return addAllImpl(collection);}
public ConfigSnapshot unsetSection(ConfigSnapshot src, String section, String subsection) {
public final String getTagName(String ns) {return ns==null? tagName : ns+":"+tagName;}
public void addSubRecord(SubRecord element) {subrecords.add(element);}
public boolean removeAll(Collection c) {synchronized (mutex) {return delegate().removeAll(c);}}
public DoubleMetaphoneFilter create(TokenStream input, int maxCodeLength, boolean inject) {return new DoubleMetaphoneFilter(input, maxCodeLength, inject);}
public long inCoreLength() {
public void setValue(int newValue) {value = newValue;}
public Pair(ContentSource oldSource, ContentSource newSource, String oldName, String newName) {this.oldSource = oldSource;this.newSource = newSource;this.oldName = oldName;this.newName = newName;}
public int get(int i) {if (count <= i)throw new ArrayIndexOutOfBoundsException(i);return entries[i];}
public CreateRepoRequest(String repoName) {super("cr", "2016-06-07", "CreateRepo", "cr");setUriPattern("/repos");setMethod(MethodType.PUT);setRequestHeader("Content-Type", "application/json");setRequestBody("{\"repo_name\":\""+repoName+"\"}");}
public void setDeltaBaseAsOffset(boolean deltaBaseAsOffset) {this.deltaBaseAsOffset = deltaBaseAsOffset;}
public void remove(int index) {if (expectedModCount == list.modCount) {if (index < 0 || index >= list.size) {throw new IndexOutOfBoundsException();}} else {throw new ConcurrentModificationException();}}
public static MergeShardsResult executeMergeShards(MergeShardsRequest request) {
public void allocateHostedConnection(AllocateHostedConnectionRequest request, ResultCapture<AllocateHostedConnectionResult> extractor) {request = beforeClientExecution(request);
public int getEndIndex() {return end;}
public static final WeightedTerm[] getTerms(Query query, boolean sort){
public ByteBuffer compact(int start, int end) {throw new ReadOnlyBufferException();}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 2;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >>> 6);values[valuesOffset++] = byte2 & 63;}}
public String getHumanishName() throws IllegalArgumentException {String s = getPath();if ("/".equals(s) || "".equals(s)) s = getHost();if (s == null) throw new IllegalArgumentException();String[] elements;if ("file".equals(scheme) || LOCAL_FILE.matcher(s).matches()) elements = s.split("[\\" + File.separatorChar + "/]"); elseelements = s.split("/+"); if (elements.length == 0)throw new IllegalArgumentException();String result = elements[elements.length - 1];if (Constants.DOT_GIT.equals(result))result = elements[elements.length - 2];else if (result.endsWith(Constants.DOT_GIT_EXT))result = result.substring(0, result.length()- Constants.DOT_GIT_EXT.length());return result;}
public DescribeNotebookInstanceLifecycleConfigResult executeDescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) {
public String getAccessKeyID() {return this.accessKeyID;}
public CreateVpnConnectionResult createVpnConnection(CreateVpnConnectionRequest request, AsyncHandler<CreateVpnConnectionRequest, CreateVpnConnectionResult> asyncHandler) {request = beforeClientExecution(request);return executeCreateVpnConnection(request, asyncHandler);}
public DescribeVoicesResult executeDescribeVoices(DescribeVoicesRequest request) {
public ListMonitoringExecutionsResult listMonitoringExecutions(ListMonitoringExecutionsRequest request, com.amazonaws.handlers.AsyncHandler<ListMonitoringExecutionsRequest, ListMonitoringExecutionsResult> asyncHandler) {request = beforeClientExecution(request);
public DescribeJobRequest(String vaultName, String jobId, String vaultName2, String jobId2) {setVaultName(vaultName);setJobId(jobId);setVaultName2(vaultName2);setJobId2(jobId2);}
public EscherRecord getEscherRecord(int index){return escherRecords.get(index);}
public GetApisResult executeGetApis(GetApisRequest request) {
public DeleteSmsChannelResult executeDeleteSmsChannel(DeleteSmsChannelRequest request) {
public void setTrackingRefUpdate(TrackingRefUpdate trackingRefUpdate) {this.trackingRefUpdate = trackingRefUpdate;}
public void print(char c) {print(String.valueOf(c));}
public QueryNode getChild(int i) {return getChildren().get(i);}
public NotIgnoredFilter(int workdirTreeIndex, String workdirTreeName) {this.index = workdirTreeIndex; this.workdirTreeName = workdirTreeName;}
public AreaRecord(short formatFlags) {field_1_formatFlags            = formatFlags;}
public GetThumbnailRequest(String accessToken) {super("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto");setProtocol(ProtocolType.HTTPS);setAccessToken(accessToken);}
public DescribeTransitGatewayVpcAttachmentsResult executeDescribeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) {
public PutVoiceConnectorStreamingConfigurationResult executePutVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) {
