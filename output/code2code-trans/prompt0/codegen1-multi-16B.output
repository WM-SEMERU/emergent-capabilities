public void serialize(System.IO.Stream out) throws IOException {
public void addAll(BlockList<T> src, int srcDirIdx, int srcBlkIdx, int srcOff) {if (src.size == 0)return;int srcOff2 = srcOff;for (; srcDirIdx < src.tailDirIdx; srcDirIdx++)addAll(src.directory[srcDirIdx], srcBlkIdx, srcOff2);if (src.tailBlkIdx!= 0)addAll(src.tailBlock, srcBlkIdx, srcOff2);}
public void writeByte(byte b) {if (upto == blockSize) {if (currentBlock!= null) {addBlock(currentBlock);}currentBlock = new byte[blockSize];upto = 0;}currentBlock[upto++] = b;}
public ObjectId getObjectId() { return objectId; }
public DeleteDomainEntryResult executeDeleteDomainEntry(DeleteDomainEntryRequest deleteDomainEntryRequest) {
public long ramBytesUsed() {return ((termOffsets!=null)? termOffsets.ramBytesUsed() : 0) +((termsDictOffsets!=null)? termsDictOffsets.ramBytesUsed() : 0);}
public final String getFullMessage() {byte[] raw = buffer;int msgB = RawParseUtils.tagMessage(raw, 0);if (msgB < 0) {return ""; }return RawParseUtils.decode(guessEncoding(), raw, msgB, raw.length);}
public POIFSFileSystem(boolean create) {
public void init(int address, byte[] buffer) {slice = buffer;upto = address & ByteBlockPool.BYTE_BLOCK_MASK;offset0 = address;}
public SubmoduleAddCommand setPath(String path) {this.path = path;return this;}
public ListIngestionsResult listIngestions() {
public QueryParserTokenManager(CharStream stream){this(stream, 0);}
public GetShardIteratorResult getShardIterator(GetShardIteratorRequest request, IAsyncResultHandler<GetShardIteratorResult> handler) {request = beforeClientExecution(request);return executeGetShardIterator(request, handler);}
public ModifyStrategyRequest(String aegis, String date, String vip, String method) {
public boolean ready() throws IOException {
public EscherOptRecord getOptRecord() {return _optRecord;}
public synchronized int read(byte[] buffer, int offset, int length) {if (buffer == null) {throw new NullPointerException("buffer == null");}Arrays.checkOffsetAndCount(buffer.length, offset, length);if (length == 0) {return 0;}int copylen = count - pos < length? count - pos : length;for (int i = 0; i < copylen; i++) {buffer[offset + i] = (byte) this.buffer.charAt(pos + i);}pos += copylen;return copylen;}
public OpenNLPSentenceBreakIterator(ISentenceDetector sentenceOp) {this.sentenceOp = sentenceOp;}
public void print(String str) {write(str!= null? str : String.valueOf((Object) null));}
public NotImplementedFunctionException(String functionName) {super(functionName);this.functionName = functionName;}
public V next() {return super.nextEntry().getValue();}
public final void readBytes(byte[] b, int offset, int len) throws IOException {readBytes(b, offset, len, true);}
public TagQueueResult tagQueue(TagQueueRequest request, IHttpClient client) {request = beforeClientExecution(request, client);return executeTagQueue(request, client);}
public void remove() {throw new UnsupportedOperationException();}
public CacheSubnetGroup modifyCacheSubnetGroup(String subnetGroupName, String cacheSubnetGroupDescription) {request = new ModifyCacheSubnetGroupRequest();request.setCacheSubnetGroupName(subnetGroupName);request.setCacheSubnetGroupDescription(cacheSubnetGroupDescription);return modifyCacheSubnetGroup(request);}
public void setParams(String params, String language, String country, String variant) {super.setParams(params);this.language = language;this.country = country;this.variant = variant;}
public DeleteDocumentationVersionResult executeDeleteDocumentationVersion(DeleteDocumentationVersionRequest deleteDocumentationVersionRequest) {
public boolean equals(Object obj) {if (!(obj instanceof FacetLabel)) {return false;}FacetLabel other = (FacetLabel) obj;if (length!= other.length) {return false; }for (int i = length - 1; i >= 0; i--) {if (!components[i].equals(other.components[i])) {return false;}}return true;}
public GetInstanceAccessDetailsResult getInstanceAccessDetails(GetInstanceAccessDetailsRequest request) {request = beforeClientExecution(request);return executeGetInstanceAccessDetails(request);}
public HSSFPolygon createPolygon(HSSFChildAnchor anchor, int numPoints) {HSSFPolygon shape = new HSSFPolygon(this, anchor, numPoints);shape.setParent(this);shape.setAnchor(anchor);shapes.add(shape);onCreate(shape);return shape;}
public String getSheetName(int sheetIndex) {return getBoundSheetRec(sheetIndex).getSheetname();}
public GetDashboardResult getDashboard(GetDashboardRequest request, IHttpClient client) {request = beforeClientExecution(request, client);return executeGetDashboard(request, client);}
public AssociateSigninDelegateGroupsWithAccountResult executeAssociateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) {
public void addMultipleBlanks(MulBlankRecord mbr) {for (int j = 0; j < mbr.getNumColumns(); j++) {BlankRecord br = new BlankRecord();br.setColumn(( short ) (j + mbr.getFirstColumn()));br.setRow(mbr.getRow());br.setXFIndex(mbr.getXFAt(j));insertCell(br);}}
public static String quote(String string) {StringBuilder sb = new StringBuilder();sb.append("\\Q");int apos = 0;int k;while ((k = string.indexOf("\\E", apos)) >= 0) {sb.append(string.substring(apos, k + 2)).append("\\\\E\\Q");apos = k + 2;}return sb.append(string.substring(apos)).append("\\E").toString();}
public ByteBuffer putInt(int value) {throw new ReadOnlyBufferException();}
public ArrayPtg(Object[] values) {int nColumns = values.length;int nRows = 1;_nColumns = (short) nColumns;_nRows = (short) nRows;Object[] vv = new Object[_nColumns * _nRows];for (int r=0; r<nRows; r++) {Object[] rowData = values;for (int c=0; c<nColumns; c++) {vv[getValueIndex(c, r)] = rowData[c];}}_arrayValues = vv;_reserved0Int = 0;_reserved1Short = 0;_reserved2Byte = 0;}
public GetIceServerConfigResult executeGetIceServerConfig(GetIceServerConfigRequest request) {
public String toString() {return getClass().getName() + " [" +getValueAsString() +"]";}
public String toString(String field) {return "ToChildBlockJoinQuery ("+parentQuery.toString()+")";}
public final void incRef() {refCount.incrementAndGet();}
public UpdateConfigurationSetSendingEnabledResult updateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request, IUpdateConfigurationSetSendingEnabledResponseHandler responseHandler) {
public int getNextXBATChainOffset() {return getXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE;}
public void multiplyByPowerOfTen(int pow10) {TenPower tp = TenPower.getInstance(Math.abs(pow10));if (pow10 < 0) {mulShift(tp._divisor, tp._divisorShift);} else {mulShift(tp._multiplicand, tp._multiplierShift);}}
public String toString(){final StringBuilder b = new StringBuilder();final int          l = length();for (int i = 0; i < l; i++){b.append(getComponent(i));if (i < l - 1){b.append(File.separatorChar);}}return b.toString();}
public InstanceProfileCredentialsProvider withRoleName(String roleName) {this.roleName = roleName;return this;}
public void setProgressMonitor(ProgressMonitor pm) {progressMonitor = pm;}
public void reset() {if (!first()) {ptr = 0;if (!eof())parseEntry();}}
public E previous() {if (iterator.previousIndex() >= start) {return iterator.previous();}throw new NoSuchElementException();}
public String getNewPrefix() {return this.newPrefix;}
public int indexOfValue(int value) {for (int i = 0; i < mSize; i++)if (mValues[i] == value)return i;return -1;}
public List<CharsRef> uniqueStems(char word[], int length) {List<CharsRef> stems = stem(word, length);if (stems.size() < 2) {return stems;}CharArraySet terms = new CharArraySet(8, dictionary.ignoreCase);List<CharsRef> deduped = new ArrayList<>();for (CharsRef s : stems) {if (!terms.contains(s)) {deduped.add(s);terms.add(s);}}return deduped;}
public GetGatewayResponsesResult executeGetGatewayResponses(GetGatewayResponsesRequest request) {
public void setPosition(long pos, int blockUpto) {currentBlockIndex = (int) (pos >> blockBits);currentBlock = blocks[currentBlockIndex];currentBlockUpto = blockUpto;}
public long skip(long n) {int s = (int) Math.min(available(), Math.max(0, n));ptr += s;return s;}
public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig, String bootstrapActionId) {setBootstrapActionConfig(bootstrapActionConfig); setBootstrapActionId(bootstrapActionId);}
public void deserialize(LittleEndianInput in) {field_1_row = in.readShort();field_2_col = in.readShort();field_3_flags = in.readShort();field_4_shapeid = in.readShort();field_6_author = StringUtil.readCompressedUnicode(in);field_5_hasMultibyte = in.readByte() == 0x01;if (field_5_hasMultibyte) {field_6_author = StringUtil.readUnicodeLE(in);} else {field_6_author = StringUtil.readCompressedUnicode(in);}}
public int lastIndexOf(String string, int start) {
public boolean add(E object) {return addLastImpl(object);}
public ConfigSnapshot unsetSection(ConfigSnapshot src, String section, String subsection) {ConfigSnapshot res = src;if (src.hasSection(section, subsection)) {res = src.removeSection(section, subsection);} return res;}
public final String getTagName() {return tagName;}
public void addSubRecord(SubRecord element) {subrecords.add(element);}
public boolean remove(Object o) {
public DoubleMetaphoneFilter create(TokenStream input, int maxCodeLength, boolean inject) {return new DoubleMetaphoneFilter(input, maxCodeLength, inject);}
public long length() {return inCoreLength();}
public void setValue(boolean newValue) {value = newValue;}
public Pair(ContentSource oldSource, ContentSource newSource) {this.oldSource = oldSource;this.newSource = newSource;}
public int get(int i) {if (count <= i) throw new ArrayIndexOutOfBoundsException(i); return entries[i];}
public CreateRepoRequest(String name, String description, String homepage, String private_repo, String has_issues, String has_wiki, String has_downloads, String has_projects, String has_pages, String has_milestones, String has_labels, String has_team_repos, String has_collaborators, String has_teams, String has_hooks, String has_issues, String has_wiki, String has_downloads, String has_projects, String has_pages, String has_milestones, String has_labels, String has_team_repos, String has_collaborators, String has_teams, String has_hooks, String has_issues, String has_wiki, String has_downloads, String has_projects, String has_pages, String has_milestones, String has_labels, String has_team_repos, String has_collaborators, String has_teams, String has_hooks) {
public boolean isDeltaBaseAsOffset() {return deltaBaseAsOffset;}
public void remove() {if (expectedModCount == list.modCount) {if (lastLink!= null) {Link<ET> next = lastLink.next;Link<ET> previous = lastLink.previous;next.previous = previous;previous.next = next;if (lastLink == link) {pos--;}link = previous;lastLink = null;expectedModCount++;list.size--;list.modCount++;} else {throw new IllegalStateException();}} else {throw new ConcurrentModificationException();}}
public MergeShardsResult mergeShards(MergeShardsRequest request, IClusterManagementService service) {request = beforeClientExecution(request, service);return executeMergeShards(request, service);}
public AllocateHostedConnectionResult allocateHostedConnection(AllocateHostedConnectionRequest request, ICompute compute) {request = beforeClientExecution(request, compute);return executeAllocateHostedConnection(request, compute);}
public int getBeginIndex() {return start;}
public static final WeightedTerm[] getTerms(Query query, boolean useCS){
public ByteBuffer compact() {throw new ReadOnlyBufferException();}
public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 2;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >>> 6);values[valuesOffset++] = byte2 & 63;}}
public String getHumanishName() throws IllegalArgumentException {String s = getPath();if ("/".equals(s) || "".equals(s)) s = getHost();if (s == null) throw new IllegalArgumentException();String[] elements;if ("file".equals(scheme) || LOCAL_FILE.matcher(s).matches()) elements = s.split("[\\" + File.separatorChar + "/]"); elseelements = s.split("/+"); if (elements.length == 0)throw new IllegalArgumentException();String result = elements[elements.length - 1];if (Constants.DOT_GIT.equals(result))result = elements[elements.length - 2];else if (result.endsWith(Constants.DOT_GIT_EXT))result = result.substring(0, result.length()- Constants.DOT_GIT_EXT.length());return result;}
public DescribeNotebookInstanceLifecycleConfigResult executeDescribeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest describeNotebookInstanceLifecycleConfigRequest) {
public String getAccessKeySecret() {return this.accessKeySecret;}
public CreateVpnConnectionResult createVpnConnection(CreateVpnConnectionRequest request, IabResult result) {request = beforeClientExecution(request, result);return executeCreateVpnConnection(request);}
public DescribeVoicesResult executeDescribeVoices(DescribeVoicesRequest describeVoicesRequest) {
public ListMonitoringExecutionsResult executeListMonitoringExecutions(ListMonitoringExecutionsRequest request) {
public DescribeJobRequest(String vaultName, String jobId, String jobType) {setVaultName(vaultName);setJobId(jobId);setJobType(jobType);}
public EscherRecord getEscherRecord(int index){return escherRecords.get(index);}
public GetApisResult getApis(GetApisRequest request, IHttpClient client) {request = beforeClientExecution(request, client);return executeGetApis(request, client);}
public DeleteSmsChannelResult executeDeleteSmsChannel(DeleteSmsChannelRequest deleteSmsChannelRequest) {
public TrackingRefUpdate getTrackingRefUpdate() {return trackingRefUpdate;}
public void print(boolean b) {print(String.valueOf(b));}
public QueryNode getChild() {return children.get(0);}
public NotIgnoredFilter(int workdirTreeIndex, int index) {this.index = index;}
public AreaRecord(short formatFlags) {field_1_formatFlags            = formatFlags;}
public GetThumbnailRequest(String accessToken) {super("CloudPhoto", "2017-07-11", "GetThumbnail", "cloudphoto");setAccessToken(accessToken);setProtocol(ProtocolType.HTTPS);}
public DescribeTransitGatewayVpcAttachmentsResult executeDescribeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest describeTransitGatewayVpcAttachmentsRequest) {
public PutVoiceConnectorStreamingConfigurationResult putVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request, IpAccessControlList ipAccessControlList) {request = beforeClientExecution(request, ipAccessControlList);return executePutVoiceConnectorStreamingConfiguration(request);}
