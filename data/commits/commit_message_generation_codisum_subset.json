{"format": 1, "name": "commit_message_generation_codisum_subset", "cases": [{"prompt": "diff --git a/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java\nindex e4ecae8..c7aa051 100644\n--- a/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java\n+++ b/codec-http/src/main/java/io/netty/handler/codec/http/HttpRequestEncoder.java\n@@ -35,7 +35,7 @@ public class HttpRequestEncoder extends HttpObjectEncoder<HttpRequest> {\n \n     @Override\n     protected void encodeInitialLine(ByteBuf buf, HttpRequest request) throws Exception {\n-        buf.writeBytes(request.getMethod().toString().getBytes(CharsetUtil.US_ASCII));\n+        encodeAscii(request.getMethod().toString(), buf);\n         buf.writeByte(SP);\n \n         // Add / as absolute path if no is present.\n@@ -51,7 +51,7 @@ public class HttpRequestEncoder extends HttpObjectEncoder<HttpRequest> {\n         buf.writeBytes(uri.getBytes(CharsetUtil.UTF_8));\n \n         buf.writeByte(SP);\n-        buf.writeBytes(request.getProtocolVersion().toString().getBytes(CharsetUtil.US_ASCII));\n+        encodeAscii(request.getProtocolVersion().toString(), buf);\n         buf.writeBytes(CRLF);\n     }\n }\n", "truth": "Improve performance of HttpRequestEncoder.encodeInitialLine(...)"}, {"prompt": "diff --git a/core/src/main/java/org/acegisecurity/ui/webapp/AuthenticationProcessingFilter.java b/core/src/main/java/org/acegisecurity/ui/webapp/AuthenticationProcessingFilter.java\nindex 46cfc0b3a..a4414585d 100644\n--- a/core/src/main/java/org/acegisecurity/ui/webapp/AuthenticationProcessingFilter.java\n+++ b/core/src/main/java/org/acegisecurity/ui/webapp/AuthenticationProcessingFilter.java\n@@ -77,7 +77,9 @@ public class AuthenticationProcessingFilter extends AbstractProcessingFilter {\n \n         UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(username,\n                 password);\n-        authRequest.setDetails(request.getRemoteAddr());\n+\n+        // Allow subclasses to set the \"details\" property\n+        setDetails(request, authRequest);\n \n         return this.getAuthenticationManager().authenticate(authRequest);\n     }\n", "truth": "Fix bug where class should delegate to setDetails method - not set the details directly."}, {"prompt": "diff --git a/UIDesignerCore/src/com/intellij/uiDesigner/compiler/StringPropertyCodeGenerator.java b/UIDesignerCore/src/com/intellij/uiDesigner/compiler/StringPropertyCodeGenerator.java\nindex b467938..83e763f 100644\n--- a/UIDesignerCore/src/com/intellij/uiDesigner/compiler/StringPropertyCodeGenerator.java\n+++ b/UIDesignerCore/src/com/intellij/uiDesigner/compiler/StringPropertyCodeGenerator.java\n@@ -77,9 +77,9 @@ public class StringPropertyCodeGenerator extends PropertyCodeGenerator implement\n           if (myHaveSetDisplayedMnemonicIndex) {\n             generator.loadLocal(componentLocal);\n             generator.push(textWithMnemonic.myMnemonicIndex);\n-            generator.invokeStatic(Type.getType(SupportCode.class),\n-                                   new Method(\"setDisplayedMnemonicIndex\",\n-                                              Type.VOID_TYPE, new Type[] { Type.getType(JComponent.class), Type.INT_TYPE } ));\n+            generator.invokeVirtual(Type.getType(componentClass),\n+                                    new Method(\"setDisplayedMnemonicIndex\",\n+                                               Type.VOID_TYPE, new Type[] { Type.INT_TYPE } ));\n           }\n           return true;\n         }\n", "truth": "don't use SupportCode for generating setDisplayedMnemonicIndex()"}, {"prompt": "diff --git a/core/java/com/android/internal/widget/ContactHeaderWidget.java b/core/java/com/android/internal/widget/ContactHeaderWidget.java\nindex 9e48777..8bae3e4 100644\n--- a/core/java/com/android/internal/widget/ContactHeaderWidget.java\n+++ b/core/java/com/android/internal/widget/ContactHeaderWidget.java\n@@ -39,6 +39,7 @@ import android.provider.ContactsContract.Intents;\n import android.provider.ContactsContract.PhoneLookup;\n import android.provider.ContactsContract.Presence;\n import android.provider.ContactsContract.RawContacts;\n+import android.provider.ContactsContract.CommonDataKinds.Email;\n import android.provider.ContactsContract.CommonDataKinds.Photo;\n import android.provider.SocialContract.Activities;\n import android.util.AttributeSet;\n@@ -347,9 +348,8 @@ public class ContactHeaderWidget extends FrameLayout implements View.OnClickList\n     public void bindFromEmail(String emailAddress) {\n         Cursor c = null;\n         try {\n-            c = mContentResolver.query(Uri.withAppendedPath(\n-                    RawContacts.CONTENT_FILTER_EMAIL_URI, Uri.encode(emailAddress)),\n-                    EMAIL_LOOKUP_PROJECTION, null, null, null);\n+            c = mContentResolver.query(Uri.withAppendedPath(Email.CONTENT_FILTER_EMAIL_URI, Uri\n+                    .encode(emailAddress)), EMAIL_LOOKUP_PROJECTION, null, null, null);\n             if (c != null && c.moveToFirst()) {\n                 long contactId = c.getLong(EMAIL_LOOKUP_CONTACT_ID_COLUMN_INDEX);\n                 bindFromContactId(contactId);\n", "truth": "Don't use deprecated API in contact header widget."}, {"prompt": "diff --git a/plugins/sonar-jacoco-plugin/src/main/java/org/sonar/plugins/jacoco/JacocoAntInitializer.java b/plugins/sonar-jacoco-plugin/src/main/java/org/sonar/plugins/jacoco/JacocoAntInitializer.java\nindex 83584e2b12..37d65067e3 100644\n--- a/plugins/sonar-jacoco-plugin/src/main/java/org/sonar/plugins/jacoco/JacocoAntInitializer.java\n+++ b/plugins/sonar-jacoco-plugin/src/main/java/org/sonar/plugins/jacoco/JacocoAntInitializer.java\n@@ -44,7 +44,6 @@ public class JacocoAntInitializer extends Initializer implements CoverageExtensi\n   @Override\n   public boolean shouldExecuteOnProject(org.sonar.api.resources.Project project) {\n     return project.getAnalysisType().equals(Project.AnalysisType.DYNAMIC);\n-    // TODO return project.getAnalysisType().equals(Project.AnalysisType.DYNAMIC) && project.getFileSystem().hasTestFiles(Java.INSTANCE);\n   }\n \n   @Override\n@@ -66,7 +65,6 @@ public class JacocoAntInitializer extends Initializer implements CoverageExtensi\n           }\n         }\n         // Execute target\n-        // TODO antProject.getExecutor().executeTargets(antProject, new String[] { \"test\" });\n         target.performTasks();\n       }\n     }\ndiff --git a/sonar-server/src/main/java/org/sonar/server/filters/Filter.java b/sonar-server/src/main/java/org/sonar/server/filters/Filter.java\nindex 1e576e1864..80987f854b 100644\n--- a/sonar-server/src/main/java/org/sonar/server/filters/Filter.java\n+++ b/sonar-server/src/main/java/org/sonar/server/filters/Filter.java\n@@ -181,10 +181,6 @@ public class Filter {\n     return !isNumericMetric || sortedByLanguage || sortedByName || sortedByVersion;\n   }\n \n-//  public Filter setSortedMetricId(Integer id) {\n-//    return setSortedMetricId(id, true, false);\n-//  }\n-\n   public Filter setSortedMetricId(Integer id, boolean isNumericValue, Boolean isVariation) {\n     unsetSorts();\n     this.sortedMetricId = id;\n", "truth": "Remove some commented-out code"}, {"prompt": "diff --git a/ui/impl/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java b/ui/impl/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\nindex 7c28717..dc5fb42 100644\n--- a/ui/impl/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\n+++ b/ui/impl/com/intellij/openapi/ui/impl/DialogWrapperPeerImpl.java\n@@ -27,8 +27,10 @@ import org.jetbrains.annotations.NotNull;\n import javax.swing.*;\n import java.awt.*;\n import java.awt.event.*;\n+import java.awt.image.BufferStrategy;\n import java.lang.ref.WeakReference;\n import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n \n public class DialogWrapperPeerImpl extends DialogWrapperPeer {\n@@ -509,6 +511,16 @@ public class DialogWrapperPeerImpl extends DialogWrapperPeer {\n         myFocusTrackback.dispose();\n         myFocusTrackback = null;\n       }\n+      final BufferStrategy strategy = getBufferStrategy();\n+      if (strategy != null) {\n+        try {\n+          Method method = strategy.getClass().getMethod(\"dispose\");   // added in JDK 1.6 so cannot call directly\n+          method.invoke(strategy);\n+        }\n+        catch(Exception ex) {\n+          // ignore\n+        }\n+      }\n       super.dispose();\n \n       if (rootPane != null) { // Workaround for bug in native code to hold rootPane\n", "truth": "dispose buffer strategy on closing dialog"}, {"prompt": "diff --git a/web/src/main/java/org/jboss/as/web/WebConnectorService.java b/web/src/main/java/org/jboss/as/web/WebConnectorService.java\nindex 4e0f65b74a..f8332cc0de 100644\n--- a/web/src/main/java/org/jboss/as/web/WebConnectorService.java\n+++ b/web/src/main/java/org/jboss/as/web/WebConnectorService.java\n@@ -32,8 +32,8 @@ import java.util.concurrent.Executor;\n \n import org.apache.catalina.connector.Connector;\n import org.apache.coyote.ajp.AjpAprProtocol;\n+import org.apache.coyote.ajp.AjpProtocol;\n import org.apache.coyote.http11.Http11AprProtocol;\n-import org.apache.coyote.http11.Http11Protocol;\n import org.jboss.as.network.ManagedBinding;\n import org.jboss.as.network.SocketBinding;\n import org.jboss.dmr.ModelNode;\n@@ -140,7 +140,7 @@ class WebConnectorService implements Service<Connector> {\n                 boolean nativeSSL = false;\n                 if (connector.getProtocolHandler() instanceof Http11AprProtocol) {\n                     nativeSSL = true;\n-                } else if (!(connector.getProtocolHandler() instanceof Http11Protocol)) {\n+                } else if ((connector.getProtocolHandler() instanceof AjpProtocol) || (connector.getProtocolHandler() instanceof AjpAprProtocol)) {\n                     throw new StartException(MESSAGES.noSSLWithNonHTTPConnectors());\n                 }\n                 // Enable SSL\n", "truth": "Allow non AJP connectors to support SSL by default."}, {"prompt": "diff --git a/servlet/src/main/java/io/undertow/servlet/spec/ServletOutputStreamImpl.java b/servlet/src/main/java/io/undertow/servlet/spec/ServletOutputStreamImpl.java\nindex dc68d904b..4173450b3 100644\n--- a/servlet/src/main/java/io/undertow/servlet/spec/ServletOutputStreamImpl.java\n+++ b/servlet/src/main/java/io/undertow/servlet/spec/ServletOutputStreamImpl.java\n@@ -613,10 +613,12 @@ public class ServletOutputStreamImpl extends ServletOutputStream implements Buff\n                 if (channel == null) {\n                     channel = servletRequestContext.getExchange().getResponseChannel();\n                 }\n-                StreamSinkChannel channel = this.channel;\n-                channel.shutdownWrites();\n                 state |= FLAG_DELEGATE_SHUTDOWN;\n-                Channels.flushBlocking(channel);\n+                StreamSinkChannel channel = this.channel;\n+                if(channel != null) { //mock requests\n+                    channel.shutdownWrites();\n+                    Channels.flushBlocking(channel);\n+                }\n             } finally {\n                 if (pooledBuffer != null) {\n                     pooledBuffer.free();\n", "truth": "Fix NPE when using mock requests"}, {"prompt": "diff --git a/ratpack-test/src/main/java/ratpack/test/embed/internal/PathBaseDirBuilder.java b/ratpack-test/src/main/java/ratpack/test/embed/internal/PathBaseDirBuilder.java\nindex d403dc991..e7a703f86 100644\n--- a/ratpack-test/src/main/java/ratpack/test/embed/internal/PathBaseDirBuilder.java\n+++ b/ratpack-test/src/main/java/ratpack/test/embed/internal/PathBaseDirBuilder.java\n@@ -80,6 +80,8 @@ public class PathBaseDirBuilder implements BaseDirBuilder {\n       fileSystem.close();\n     }\n \n+    System.gc();\n+\n     Files.walkFileTree(toDelete, new SimpleFileVisitor<Path>() {\n       @Override\n       public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n", "truth": "Explicitly call `System.gc()` to fix tests on Windows platform"}, {"prompt": "diff --git a/presto-main/src/main/java/com/facebook/presto/operator/RecordProjectOperator.java b/presto-main/src/main/java/com/facebook/presto/operator/RecordProjectOperator.java\nindex 3f6fd77..d4a9b07 100644\n--- a/presto-main/src/main/java/com/facebook/presto/operator/RecordProjectOperator.java\n+++ b/presto-main/src/main/java/com/facebook/presto/operator/RecordProjectOperator.java\n@@ -170,8 +170,6 @@ public class RecordProjectOperator\n         Page page = pageBuilder.build();\n         pageBuilder.reset();\n \n-        operatorContext.recordGeneratedInput(page.getDataSize(), page.getPositionCount());\n-\n         return page;\n     }\n }\n", "truth": "Don't double count bytes and rows in RecordProjectOperator"}, {"prompt": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/SerialMessage.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/SerialMessage.java\nindex 758be3b..a4c66ae 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/SerialMessage.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/SerialMessage.java\n@@ -186,9 +186,9 @@ public class SerialMessage {\n \t */\n \t@Override\n \tpublic String toString() {\n-\t\treturn String.format(\"Message: class = %s (0x%02X), type = %s (0x%02X), buffer = %s\", \n+\t\treturn String.format(\"Message: class = %s (0x%02X), type = %s (0x%02X), payload = %s\", \n \t\t\t\tnew Object[] { messageClass, messageClass.key, messageType, messageType.ordinal(),\n-\t\t\t\tSerialMessage.bb2hex(this.getMessageBuffer()) });\n+\t\t\t\tSerialMessage.bb2hex(this.getMessagePayload()) });\n \t};\n \t\n \t/**\n", "truth": "Change printout of message to payload to avoid modifying the packet."}, {"prompt": "diff --git a/LayoutPlugin/src/org/gephi/layout/plugin/rotate/ClockwiseRotate.java b/LayoutPlugin/src/org/gephi/layout/plugin/rotate/ClockwiseRotate.java\nindex 21af04d2f..e5e79148f 100644\n--- a/LayoutPlugin/src/org/gephi/layout/plugin/rotate/ClockwiseRotate.java\n+++ b/LayoutPlugin/src/org/gephi/layout/plugin/rotate/ClockwiseRotate.java\n@@ -38,7 +38,7 @@ public class ClockwiseRotate implements LayoutBuilder {\n     private ClockwiseRotateLayoutUI ui = new ClockwiseRotateLayoutUI();\n \n     public Layout buildLayout() {\n-        return new RotateLayout(this, -90);\n+        return new RotateLayout(this, 90);\n     }\n \n     public String getName() {\n", "truth": "Fix the initial value of the rotate parameter for Clockwise layout."}, {"prompt": "diff --git a/src/main/java/org/elasticsearch/cloud/azure/AzureStorageServiceImpl.java b/src/main/java/org/elasticsearch/cloud/azure/AzureStorageServiceImpl.java\nindex 5c61779..e968ec7 100644\n--- a/src/main/java/org/elasticsearch/cloud/azure/AzureStorageServiceImpl.java\n+++ b/src/main/java/org/elasticsearch/cloud/azure/AzureStorageServiceImpl.java\n@@ -120,6 +120,9 @@ public class AzureStorageServiceImpl extends AbstractLifecycleComponent<AzureSto\n         options.setRetryPolicyFactory(new RetryNoRetry());\n         blob_container.deleteIfExists(options, null);\n         */\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"removing container [{}]\", container);\n+        }\n         blob_container.deleteIfExists();\n     }\n \n", "truth": "Add a missing trace to `removeContainer`"}, {"prompt": "diff --git a/src/main/java/com/sk89q/worldedit/command/RegionCommands.java b/src/main/java/com/sk89q/worldedit/command/RegionCommands.java\nindex 5534df37..e8dd4427 100644\n--- a/src/main/java/com/sk89q/worldedit/command/RegionCommands.java\n+++ b/src/main/java/com/sk89q/worldedit/command/RegionCommands.java\n@@ -131,7 +131,7 @@ public class RegionCommands {\n             desc = \"Draws a spline through selected points\",\n             help =\n                 \"Draws a spline through selected points.\\n\" +\n-                \"Can only be uesd with convex polyhedral selections.\\n\" +\n+                \"Can only be used with convex polyhedral selections.\\n\" +\n                 \"Flags:\\n\" +\n                 \"  -h generates only a shell\",\n             flags = \"h\",\n", "truth": "Fixed typo in //curve's help."}, {"prompt": "diff --git a/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java b/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java\nindex 1acb0f2..da37ebb 100644\n--- a/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java\n+++ b/transport/src/main/java/io/netty/bootstrap/ServerBootstrap.java\n@@ -43,7 +43,7 @@ import java.util.Map.Entry;\n  * {@link Bootstrap} sub-class which allows easy bootstrap of {@link ServerChannel}\n  *\n  */\n-public class ServerBootstrap extends AbstractBootstrap<ServerBootstrap> {\n+public final class ServerBootstrap extends AbstractBootstrap<ServerBootstrap> {\n \n     private static final InternalLogger logger = InternalLoggerFactory.getInstance(ServerBootstrap.class);\n \n", "truth": "Make ServerBootstrap final"}, {"prompt": "diff --git a/UsageView/src/com/intellij/usages/UsageInfo2UsageAdapter.java b/UsageView/src/com/intellij/usages/UsageInfo2UsageAdapter.java\nindex dc6fdc6..151a9fb 100644\n--- a/UsageView/src/com/intellij/usages/UsageInfo2UsageAdapter.java\n+++ b/UsageView/src/com/intellij/usages/UsageInfo2UsageAdapter.java\n@@ -242,8 +242,7 @@ public class UsageInfo2UsageAdapter implements Usage, UsageInModule, UsageInLibr\n     }\n \n     public TextChunk[] getText() {\n-      final PsiElement element = getElement();\n-      if (element != null && element.isValid()) {\n+      if (isValid()) {\n         // the check below makes sence only for valid PsiElement\n         final long currentModificationStamp = getCurrentModificationStamp();\n         if (currentModificationStamp != myModificationStamp) {\n", "truth": "js highlighting fixes"}, {"prompt": "diff --git a/core/common/src/main/java/alluxio/collections/IndexDefinition.java b/core/common/src/main/java/alluxio/collections/IndexDefinition.java\nindex 6eaaade..fdab7ca 100644\n--- a/core/common/src/main/java/alluxio/collections/IndexDefinition.java\n+++ b/core/common/src/main/java/alluxio/collections/IndexDefinition.java\n@@ -11,6 +11,8 @@\n \n package alluxio.collections;\n \n+import javax.annotation.concurrent.ThreadSafe;\n+\n /**\n  * A class representing the definition of an index for this {@link IndexedSet}. Each instance of\n  * this class must implement the method to define how to get the value of the field chosen as\n@@ -19,6 +21,7 @@ package alluxio.collections;\n  *\n  * @param <T> type of objects in this {@link IndexedSet}\n  */\n+@ThreadSafe\n public abstract class IndexDefinition<T> {\n   /** Whether it is a unique index. */\n   //TODO(lei): change the mIsUnique to mIndexType enum\ndiff --git a/core/common/src/main/java/alluxio/collections/NonUniqueFieldIndex.java b/core/common/src/main/java/alluxio/collections/NonUniqueFieldIndex.java\nindex 456c603..c3225fb 100644\n--- a/core/common/src/main/java/alluxio/collections/NonUniqueFieldIndex.java\n+++ b/core/common/src/main/java/alluxio/collections/NonUniqueFieldIndex.java\n@@ -17,12 +17,15 @@ import java.util.Collections;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n \n+import javax.annotation.concurrent.ThreadSafe;\n+\n /**\n  * A class representing a non-unique index. A non-unique index is\n  * an index where an index value can map to one or more objects.\n  *\n  * @param <T> type of objects in this {@link IndexedSet}\n  */\n+@ThreadSafe\n class NonUniqueFieldIndex<T> implements FieldIndex<T> {\n   private final IndexDefinition<T> mIndexDefinition;\n   private final ConcurrentHashMap<Object, ConcurrentHashSet<T>> mIndexMap;\ndiff --git a/core/common/src/main/java/alluxio/collections/UniqueFieldIndex.java b/core/common/src/main/java/alluxio/collections/UniqueFieldIndex.java\nindex 3682ead..e69bb0c 100644\n--- a/core/common/src/main/java/alluxio/collections/UniqueFieldIndex.java\n+++ b/core/common/src/main/java/alluxio/collections/UniqueFieldIndex.java\n@@ -15,12 +15,15 @@ import java.util.Collections;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n \n+import javax.annotation.concurrent.ThreadSafe;\n+\n /**\n  * A class representing a unique index. A unique index is an index\n  * where each index value only maps to one object.\n  *\n  * @param <T> type of objects in this {@link IndexedSet}\n  */\n+@ThreadSafe\n class UniqueFieldIndex<T> implements FieldIndex<T> {\n   private final IndexDefinition<T> mIndexDefinition;\n   private final ConcurrentHashMap<Object, T> mIndexMap;\n", "truth": "add ThreadSafe annotation"}, {"prompt": "diff --git a/squidb-addons/squidb-json/squidb-json-plugin/src/com/yahoo/squidb/json/JSONPropertySupport.java b/squidb-addons/squidb-json/squidb-json-plugin/src/com/yahoo/squidb/json/JSONPropertySupport.java\nindex ecc1b64..13a38f8 100644\n--- a/squidb-addons/squidb-json/squidb-json-plugin/src/com/yahoo/squidb/json/JSONPropertySupport.java\n+++ b/squidb-addons/squidb-json/squidb-json-plugin/src/com/yahoo/squidb/json/JSONPropertySupport.java\n@@ -32,8 +32,8 @@ public class JSONPropertySupport {\n     public static <T> T getValueFromJSON(AbstractModel model, JSONProperty<T> property, Type javaType) {\n         if (!model.hasTransitory(property.getName())) {\n             T data = null;\n-            if (model.containsNonNullValue(property)) {\n-                String value = model.get(property);\n+            String value = model.get(property); // Will throw if model doesn't have property\n+            if (value != null) {\n                 try {\n                     if (MAPPER == null) {\n                         throw new NullPointerException(\"JSONPropertySupport needs to be initialized with a \"\n", "truth": "JSONProperty getter should throw if model doesn't have property, the same as all other properties do"}, {"prompt": "diff --git a/v7/recyclerview/src/android/support/v7/widget/RecyclerView.java b/v7/recyclerview/src/android/support/v7/widget/RecyclerView.java\nindex 19e70b820..bb9a61337 100644\n--- a/v7/recyclerview/src/android/support/v7/widget/RecyclerView.java\n+++ b/v7/recyclerview/src/android/support/v7/widget/RecyclerView.java\n@@ -2362,7 +2362,7 @@ public class RecyclerView extends ViewGroup {\n          */\n         public void clear() {\n             mAttachedScrap.clear();\n-            mCachedViews.clear();\n+            recycleCachedViews();\n         }\n \n         /**\n@@ -2456,6 +2456,18 @@ public class RecyclerView extends ViewGroup {\n             recycleViewHolder(getChildViewHolderInt(view));\n         }\n \n+        void recycleCachedViews() {\n+            final int count = mCachedViews.size();\n+            for (int i = count - 1; i >= 0; i--) {\n+                final ViewHolder cachedView = mCachedViews.get(i);\n+                if (cachedView.isRecyclable()) {\n+                    getRecycledViewPool().putRecycledView(cachedView);\n+                    dispatchViewRecycled(cachedView);\n+                }\n+                mCachedViews.remove(i);\n+            }\n+        }\n+\n         void recycleViewHolder(ViewHolder holder) {\n             if (holder.isScrap() || holder.itemView.getParent() != null) {\n                 throw new IllegalArgumentException(\n", "truth": "Recycle cached views when clearing the cache."}, {"prompt": "diff --git a/UltimateRecyclerView/ultimaterecyclerview/src/main/java/com/marshalchen/ultimaterecyclerview/UltimateViewAdapter.java b/UltimateRecyclerView/ultimaterecyclerview/src/main/java/com/marshalchen/ultimaterecyclerview/UltimateViewAdapter.java\nindex 33514d2..cc5b801 100644\n--- a/UltimateRecyclerView/ultimaterecyclerview/src/main/java/com/marshalchen/ultimaterecyclerview/UltimateViewAdapter.java\n+++ b/UltimateRecyclerView/ultimaterecyclerview/src/main/java/com/marshalchen/ultimaterecyclerview/UltimateViewAdapter.java\n@@ -193,7 +193,9 @@ public abstract class UltimateViewAdapter extends RecyclerView.Adapter<RecyclerV\n     @Override\n     public long getHeaderId(int position) {\n         if (customHeaderView != null && position == 0) return -1;\n-        return generateHeaderId(position);\n+        if (getAdapterItemCount() > 0)\n+            return generateHeaderId(position);\n+        else return -1;\n     }\n \n     public abstract long generateHeaderId(int position);\n", "truth": "update UltimateViewAdapter for HeadId"}, {"prompt": "diff --git a/src/org/parosproxy/paros/network/HttpSender.java b/src/org/parosproxy/paros/network/HttpSender.java\nindex df407d77..99cceda9 100644\n--- a/src/org/parosproxy/paros/network/HttpSender.java\n+++ b/src/org/parosproxy/paros/network/HttpSender.java\n@@ -61,6 +61,7 @@\n // ZAP: 2016/06/10 Allow to validate the URI of the redirections before being followed\r\n // ZAP: 2016/08/04 Added removeListener(..)\r\n // ZAP: 2016/12/07 Add initiator constant for AJAX spider requests\r\n+// ZAP: 2016/12/12 Add initiator constant for Forced Browse requests\r\n \r\n package org.parosproxy.paros.network;\r\n \r\n@@ -112,6 +113,7 @@ public class HttpSender {\n \tpublic static final int BEAN_SHELL_INITIATOR = 8;\r\n \tpublic static final int ACCESS_CONTROL_SCANNER_INITIATOR = 9;\r\n \tpublic static final int AJAX_SPIDER_INITIATOR = 10;\r\n+\tpublic static final int FORCED_BROWSE_INITIATOR = 11;\r\n \r\n \tprivate static Logger log = Logger.getLogger(HttpSender.class);\r\n \r\n", "truth": "Add initiator constant for Forced Browse requests"}, {"prompt": "diff --git a/src/org/wordpress/android/ui/comments/CommentDetailFragment.java b/src/org/wordpress/android/ui/comments/CommentDetailFragment.java\nindex ab02b4a9a..7f1ad3e8d 100644\n--- a/src/org/wordpress/android/ui/comments/CommentDetailFragment.java\n+++ b/src/org/wordpress/android/ui/comments/CommentDetailFragment.java\n@@ -435,7 +435,11 @@ public class CommentDetailFragment extends Fragment implements NotificationFragm\n \n         final TextView txtPostTitle = (TextView) getView().findViewById(R.id.text_post_title);\n         boolean postExists = ReaderPostTable.postExists(blogId, postId);\n+\n+        // the post this comment is on can only be requested if this is a .com blog or a\n+        // jetpack-enabled self-hosted blog, and we have valid .com credentials\n         boolean isDotComOrJetpack = WordPress.wpDB.isRemoteBlogIdDotComOrJetpack(mRemoteBlogId);\n+        boolean canRequestPost = isDotComOrJetpack && WordPress.hasValidWPComCredentials(getActivity());\n \n         final String title;\n         final boolean hasTitle;\n@@ -452,14 +456,14 @@ public class CommentDetailFragment extends Fragment implements NotificationFragm\n             hasTitle = false;\n         }\n         if (hasTitle) {\n-            setPostTitle(txtPostTitle, title, isDotComOrJetpack);\n+            setPostTitle(txtPostTitle, title, canRequestPost);\n         } else {\n             txtPostTitle.setText(postExists ? R.string.untitled : R.string.loading);\n         }\n \n         // if this is a .com or jetpack blog, tapping the title shows the associated post\n         // in the reader\n-        if (isDotComOrJetpack) {\n+        if (canRequestPost) {\n             // first make sure this post is available to the reader, and once it's retrieved set\n             // the title if it wasn't set above\n             if (!postExists) {\n", "truth": "Comment detail now only requests the post associated with the comment if valid ."}, {"prompt": "diff --git a/ribbon-core/src/main/java/com/netflix/client/LoadBalancerContext.java b/ribbon-core/src/main/java/com/netflix/client/LoadBalancerContext.java\nindex 9285248..1978b79 100644\n--- a/ribbon-core/src/main/java/com/netflix/client/LoadBalancerContext.java\n+++ b/ribbon-core/src/main/java/com/netflix/client/LoadBalancerContext.java\n@@ -453,7 +453,7 @@ public abstract class LoadBalancerContext<T extends ClientRequest, S extends IRe\n                 host = svc.getHost();\n \n                 if(shouldUseOverridePort){\n-                    logger.debug(\"Using override port of %d on client %s\", clientName);\n+                    logger.debug(\"Using override port of %d on client %s\", overridePort, clientName);\n                     port = overridePort;\n                 }else{\n                     port = svc.getPort();\n", "truth": "fixing debug statement"}, {"prompt": "diff --git a/storio-sample-app/src/main/java/com/pushtorefresh/storio/sample/Logger.java b/storio-sample-app/src/main/java/com/pushtorefresh/storio/sample/Logger.java\nindex 8b73182f..2fe8ce5a 100644\n--- a/storio-sample-app/src/main/java/com/pushtorefresh/storio/sample/Logger.java\n+++ b/storio-sample-app/src/main/java/com/pushtorefresh/storio/sample/Logger.java\n@@ -5,6 +5,9 @@ import android.util.Log;\n \n import com.pushtorefresh.storio.LogListenerAdapter;\n \n+/**\n+ * Log Proxy for StorIO\n+ */\n public class Logger extends LogListenerAdapter {\n \n     private static final String TAG = \"StorIO-Sample\";\n", "truth": "Add JavaDoc to Logger from Sample app"}, {"prompt": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/views/console/shell/assist/CompletionPopupPanel.java b/src/gwt/src/org/rstudio/studio/client/workbench/views/console/shell/assist/CompletionPopupPanel.java\nindex eeb7494ce..6c409da21 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/views/console/shell/assist/CompletionPopupPanel.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/views/console/shell/assist/CompletionPopupPanel.java\n@@ -64,9 +64,7 @@ public class CompletionPopupPanel extends ThemedPopupPanel\n    private void hideAll()\n    {\n       // Throw everything off-screen to reduce flickering\n-      help_.setPopupPosition(-1000, -1000);\n-      setPopupPosition(-1000, -1000);\n-      help_.clearHelp(false);\n+      setVisible(false);\n       help_.setVisible(false);\n    }\n \n@@ -254,7 +252,7 @@ public class CompletionPopupPanel extends ThemedPopupPanel\n    {\n       return help_.isVisible() && help_.isShowing();\n    }\n-\n+   \n    private HTML setText(String text)\n    {\n       HTML contents = new HTML() ;\n", "truth": "remove popup placement hacks"}, {"prompt": "diff --git a/src/edu/stanford/nlp/parser/tools/ChangeBaseParserWeight.java b/src/edu/stanford/nlp/parser/tools/ChangeBaseParserWeight.java\nindex f239265..d6eb5fe 100644\n--- a/src/edu/stanford/nlp/parser/tools/ChangeBaseParserWeight.java\n+++ b/src/edu/stanford/nlp/parser/tools/ChangeBaseParserWeight.java\n@@ -11,6 +11,8 @@ import edu.stanford.nlp.parser.lexparser.LexicalizedParser;\n  * <code> -output model </code> <br>\n  * <code> -baseParserWeight weight </code> <br>\n  *\n+ * TODO: could be generalized to allow updating of many different options\n+ *\n  * @author John Bauer\n  */\n public class ChangeBaseParserWeight {\n", "truth": "Add a brief comment"}, {"prompt": "diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/segments/IndicesShardStoreRequestTests.java b/core/src/test/java/org/elasticsearch/action/admin/indices/segments/IndicesShardStoreRequestTests.java\nindex 09123fb..fee2f32 100644\n--- a/core/src/test/java/org/elasticsearch/action/admin/indices/segments/IndicesShardStoreRequestTests.java\n+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/segments/IndicesShardStoreRequestTests.java\n@@ -22,7 +22,6 @@ package org.elasticsearch.action.admin.indices.segments;\n import com.carrotsearch.hppc.cursors.IntObjectCursor;\n \n import com.carrotsearch.hppc.cursors.ObjectCursor;\n-import com.carrotsearch.randomizedtesting.annotations.Seed;\n import com.google.common.base.Predicate;\n import org.apache.lucene.index.CorruptIndexException;\n import org.elasticsearch.action.admin.indices.shards.IndicesShardStoresResponse;\n", "truth": "[TEST] remove redundant import"}, {"prompt": "diff --git a/src/main/java/org/junit/experimental/theories/Theories.java b/src/main/java/org/junit/experimental/theories/Theories.java\nindex 817f553..8c955c3 100644\n--- a/src/main/java/org/junit/experimental/theories/Theories.java\n+++ b/src/main/java/org/junit/experimental/theories/Theories.java\n@@ -51,7 +51,7 @@ import org.junit.runners.model.TestClass;\n  *      }\n  * }\n  * </pre>\n- * This makes it clear that the user's filename should be included in the config file name,\n+ * This makes it clear that the username should be included in the config file name,\n  * only if it doesn't contain a slash. Another test or theory might define what happens when a username does contain\n  * a slash. <code>UserTest</code> will attempt to run <code>filenameIncludesUsername</code> on every compatible data\n  * point defined in the class. If any of the assumptions fail, the data point is silently ignored. If all of the\n", "truth": "Fix Javadoc in Theories"}, {"prompt": "diff --git a/subprojects/core/src/main/groovy/org/gradle/api/internal/project/AbstractProject.java b/subprojects/core/src/main/groovy/org/gradle/api/internal/project/AbstractProject.java\nindex 89fa542..d0130fc 100644\n--- a/subprojects/core/src/main/groovy/org/gradle/api/internal/project/AbstractProject.java\n+++ b/subprojects/core/src/main/groovy/org/gradle/api/internal/project/AbstractProject.java\n@@ -717,7 +717,12 @@ public abstract class AbstractProject implements ProjectInternal, DynamicObjectA\n         return fileOperations.delete(paths);\n     }\n \n+    /**\n+     * @deprecated Use the {@link #mkdir(Object)} instead.\n+     */\n+    @Deprecated\n     public Directory dir(String path) {\n+        DeprecationLogger.nagUserOfReplacedMethod(\"AbstractProject.dir()\", \"mkdir()\");\n         String[] pathElements = path.split(\"/\");\n         String name = \"\";\n         Directory dirTask = null;\n", "truth": "Deprecate AbstractProject#dir(String)."}, {"prompt": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java b/jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java\nindex 2fced56d1a..28fea907e5 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java\n@@ -289,8 +289,9 @@ public abstract class AbstractConnector extends ContainerLifeCycle implements Co\n \n         // If we have a stop timeout\n         long stopTimeout = getStopTimeout();\n-        if (stopTimeout > 0 && _stopping!=null)\n-            _stopping.await(stopTimeout,TimeUnit.MILLISECONDS);\n+        CountDownLatch stopping=_stopping;\n+        if (stopTimeout > 0 && stopping!=null)\n+            stopping.await(stopTimeout,TimeUnit.MILLISECONDS);\n         _stopping=null;\n \n         super.doStop();\n@@ -475,7 +476,9 @@ public abstract class AbstractConnector extends ContainerLifeCycle implements Co\n                 {\n                     _acceptors[_acceptor] = null;\n                 }\n-                _stopping.countDown();\n+                CountDownLatch stopping=_stopping;\n+                if (stopping!=null)\n+                    stopping.countDown();\n             }\n         }\n     }\n", "truth": "improved shutdown handling for travis CI"}, {"prompt": "diff --git a/platform/xdebugger-api/src/com/intellij/xdebugger/XDebuggerUtil.java b/platform/xdebugger-api/src/com/intellij/xdebugger/XDebuggerUtil.java\nindex d789dee..1de4aba 100644\n--- a/platform/xdebugger-api/src/com/intellij/xdebugger/XDebuggerUtil.java\n+++ b/platform/xdebugger-api/src/com/intellij/xdebugger/XDebuggerUtil.java\n@@ -88,4 +88,6 @@ public abstract class XDebuggerUtil {\n    * @param processor processor\n    */\n   public abstract void iterateLine(@NotNull Project project, @NotNull Document document, int line, @NotNull Processor<PsiElement> processor);\n+\n+  public abstract void showBreakpointsDialog(@NotNull Project project, @Nullable XBreakpoint<?> breakpointToSelect);\n }\ndiff --git a/platform/xdebugger-impl/src/com/intellij/xdebugger/impl/XDebuggerUtilImpl.java b/platform/xdebugger-impl/src/com/intellij/xdebugger/impl/XDebuggerUtilImpl.java\nindex d5094a6..79af675 100644\n--- a/platform/xdebugger-impl/src/com/intellij/xdebugger/impl/XDebuggerUtilImpl.java\n+++ b/platform/xdebugger-impl/src/com/intellij/xdebugger/impl/XDebuggerUtilImpl.java\n@@ -42,6 +42,7 @@ import com.intellij.xdebugger.frame.XStackFrame;\n import com.intellij.xdebugger.frame.XSuspendContext;\n import com.intellij.xdebugger.frame.XValueContainer;\n import com.intellij.xdebugger.impl.breakpoints.XBreakpointUtil;\n+import com.intellij.xdebugger.impl.breakpoints.ui.BreakpointsConfigurationDialogFactory;\n import com.intellij.xdebugger.impl.breakpoints.ui.grouping.XBreakpointFileGroupingRule;\n import com.intellij.xdebugger.impl.settings.XDebuggerSettingsManager;\n import com.intellij.xdebugger.impl.ui.tree.actions.XDebuggerTreeActionBase;\n@@ -240,4 +241,9 @@ public class XDebuggerUtilImpl extends XDebuggerUtil {\n       }\n     }\n   }\n+\n+  @Override\n+  public void showBreakpointsDialog(@NotNull Project project, @Nullable XBreakpoint<?> breakpointToSelect) {\n+    BreakpointsConfigurationDialogFactory.getInstance(project).createDialog(breakpointToSelect).show();\n+  }\n }\n", "truth": "added method to show breakpoints dialog"}, {"prompt": "diff --git a/lang-impl/src/com/intellij/ide/util/PsiElementListCellRenderer.java b/lang-impl/src/com/intellij/ide/util/PsiElementListCellRenderer.java\nindex a7e84ea..7a33374 100644\n--- a/lang-impl/src/com/intellij/ide/util/PsiElementListCellRenderer.java\n+++ b/lang-impl/src/com/intellij/ide/util/PsiElementListCellRenderer.java\n@@ -82,6 +82,7 @@ public abstract class PsiElementListCellRenderer<T extends PsiElement> extends J\n \n         if (nameAttributes == null)  nameAttributes = new SimpleTextAttributes(Font.PLAIN, color);\n \n+        assert name != null: \"Null name for PSI element \" + element;\n         append(name, nameAttributes);\n         setIcon(PsiElementListCellRenderer.this.getIcon(element));\n \n", "truth": "implement getPresentableText() for alias statements"}, {"prompt": "diff --git a/entitymanager/src/main/java/org/hibernate/ejb/AbstractEntityManagerImpl.java b/entitymanager/src/main/java/org/hibernate/ejb/AbstractEntityManagerImpl.java\nindex 1eba65d151..7adc423086 100755\n--- a/entitymanager/src/main/java/org/hibernate/ejb/AbstractEntityManagerImpl.java\n+++ b/entitymanager/src/main/java/org/hibernate/ejb/AbstractEntityManagerImpl.java\n@@ -645,8 +645,10 @@ public abstract class AbstractEntityManagerImpl implements HibernateEntityManage\n \t\tif ( clazz.equals( SessionImplementor.class ) ) {\n \t\t\treturn ( T ) getSession();\n \t\t}\n-\t\t//FIXME\n-\t\treturn null;  //To change body of implemented methods use File | Settings | File Templates.\n+\t\telse {\n+\t\t\t//unknown class type\n+\t\t\tthrow new PersistenceException( \"Hibernate cannot unwrap \" + clazz);\n+\t\t}\n \t}\n \n \tprivate void joinTransaction(boolean ignoreNotJoining) {\n", "truth": "unwrap should raise a PE if the type is not unwrappable by the provider"}, {"prompt": "diff --git a/OsmAnd/src/net/osmand/plus/firstusage/FirstUsageWizardFragment.java b/OsmAnd/src/net/osmand/plus/firstusage/FirstUsageWizardFragment.java\nindex 5470f1a6c2..1675e23408 100644\n--- a/OsmAnd/src/net/osmand/plus/firstusage/FirstUsageWizardFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/firstusage/FirstUsageWizardFragment.java\n@@ -311,7 +311,9 @@ public class FirstUsageWizardFragment extends Fragment implements OsmAndLocation\n \t\t\t\tview.findViewById(R.id.map_downloading_action_button).setOnClickListener(new View.OnClickListener() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onClick(View v) {\n-\t\t\t\t\t\tshowOnMap(new LatLon(location.getLatitude(), location.getLongitude()), 13);\n+\t\t\t\t\t\tif (location != null) {\n+\t\t\t\t\t\t\tshowOnMap(new LatLon(location.getLatitude(), location.getLongitude()), 13);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t});\n \t\t\t\tview.findViewById(R.id.map_downloading_card).setVisibility(View.VISIBLE);\n", "truth": "Fix first usage wizard"}, {"prompt": "diff --git a/src/java/org/jivesoftware/openfire/user/UserManager.java b/src/java/org/jivesoftware/openfire/user/UserManager.java\nindex 384c20812..942e34df8 100644\n--- a/src/java/org/jivesoftware/openfire/user/UserManager.java\n+++ b/src/java/org/jivesoftware/openfire/user/UserManager.java\n@@ -14,7 +14,6 @@ package org.jivesoftware.openfire.user;\n import org.dom4j.Element;\r\n import org.jivesoftware.openfire.IQResultListener;\r\n import org.jivesoftware.openfire.XMPPServer;\r\n-import org.jivesoftware.openfire.roster.Roster;\r\n import org.jivesoftware.openfire.event.UserEventDispatcher;\r\n import org.jivesoftware.openfire.event.UserEventListener;\r\n import org.jivesoftware.stringprep.Stringprep;\r\n@@ -49,7 +48,7 @@ public class UserManager implements IQResultListener {\n     static {\r\n         // Initialize caches.\r\n         userCache = CacheFactory.createCache(\"User\");\r\n-        remoteUsersCache = CacheFactory.createCache(\"Remote Users Exixtence\");\r\n+        remoteUsersCache = CacheFactory.createCache(\"Remote Users Existence\");\r\n \r\n         // Load a user provider.\r\n         initProvider();\r\n", "truth": "Fixed cache name typo."}, {"prompt": "diff --git a/src/main/java/water/api/SummaryPage.java b/src/main/java/water/api/SummaryPage.java\nindex e24810b9b..ff98ba352 100644\n--- a/src/main/java/water/api/SummaryPage.java\n+++ b/src/main/java/water/api/SummaryPage.java\n@@ -56,8 +56,8 @@ public class SummaryPage extends Request {\n     Response r = Response.done(res);\n     r.setBuilder(ROOT_OBJECT, new Builder() {\n       @Override public String build(Response response, JsonElement element, String contextName) {\n-        StringBuilder pageBldr = new StringBuilder(\"<div class=container-fluid'><div class='row-fluid'><div class='span2' style='text-align:right;overflow-x:scroll;'><h5>Columns</h5>\");\n-        StringBuilder sb = new StringBuilder(\"<div class='span10' style='height:90%;overflow-y:scroll'>\");\n+        StringBuilder pageBldr = new StringBuilder(\"<div class=container-fluid'><div class='row-fluid'><div class='span2' style='overflow-y:scroll;height:100%;left:0;position:fixed;text-align:right;overflow-x:scroll;'><h5>Columns</h5>\");\n+        StringBuilder sb = new StringBuilder(\"<div class='span10' style='float:right;height:90%;overflow-y:scroll'>\");\n         JsonArray cols = element.getAsJsonObject().get(\"summary\").getAsJsonObject().get(\"columns\").getAsJsonArray();\n         Iterator<JsonElement> it = cols.iterator();\n \n", "truth": "fixed scroll; tested in Safari, FF, Chrome"}, {"prompt": "diff --git a/sonar-plugin-api/src/main/java/org/sonar/api/source/Symbolizable.java b/sonar-plugin-api/src/main/java/org/sonar/api/source/Symbolizable.java\nindex a91de4b00f..e6dac0d284 100644\n--- a/sonar-plugin-api/src/main/java/org/sonar/api/source/Symbolizable.java\n+++ b/sonar-plugin-api/src/main/java/org/sonar/api/source/Symbolizable.java\n@@ -48,6 +48,8 @@ public interface Symbolizable extends Perspective {\n     /**\n      * Creates a new reference for a symbol.\n      * The offsets are global in the file.\n+     *\n+     * @since 5.3\n      */\n     void newReference(Symbol symbol, int fromOffset, int toOffset);\n \n", "truth": "Add missing Javadoc"}, {"prompt": "diff --git a/plugins/svn4idea/src/org/jetbrains/idea/svn/commandLine/CmdStatusClient.java b/plugins/svn4idea/src/org/jetbrains/idea/svn/commandLine/CmdStatusClient.java\nindex 3ff1015..c6e41fc 100644\n--- a/plugins/svn4idea/src/org/jetbrains/idea/svn/commandLine/CmdStatusClient.java\n+++ b/plugins/svn4idea/src/org/jetbrains/idea/svn/commandLine/CmdStatusClient.java\n@@ -26,8 +26,8 @@ import org.jetbrains.annotations.Nullable;\n import org.jetbrains.idea.svn.SvnUtil;\n import org.jetbrains.idea.svn.api.BaseSvnClient;\n import org.jetbrains.idea.svn.portable.PortableStatus;\n-import org.jetbrains.idea.svn.portable.SvnExceptionWrapper;\n import org.jetbrains.idea.svn.portable.StatusClient;\n+import org.jetbrains.idea.svn.portable.SvnExceptionWrapper;\n import org.tmatesoft.svn.core.*;\n import org.tmatesoft.svn.core.internal.util.SVNPathUtil;\n import org.tmatesoft.svn.core.wc.*;\n@@ -119,7 +119,7 @@ public class CmdStatusClient extends BaseSvnClient implements StatusClient {\n \n     if (StringUtil.isEmptyOrSpaces(result)) {\n       throw new SVNException(SVNErrorMessage.create(SVNErrorCode.FS_GENERAL, \"Status request returned nothing for command: \" +\n-                                                                             command.myCommandLine.getCommandLineString()));\n+                                                                             command.getCommandText()));\n     }\n \n     try {\n", "truth": "Refactored CmdStatusClient - do not use CommandExecutor.myCommandLine directly (use corresponding CommandExecutor methods instead)"}, {"prompt": "diff --git a/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java b/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\nindex c9643ed..4dbefbd 100644\n--- a/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\n+++ b/picasso/src/test/java/com/squareup/picasso/DispatcherTest.java\n@@ -68,6 +68,11 @@ public class DispatcherTest {\n     verify(service).shutdown();\n   }\n \n+  @Test public void shutdownUnregistersReceiver() throws Exception {\n+    dispatcher.shutdown();\n+    verify(context).unregisterReceiver(dispatcher.receiver);\n+  }\n+\n   @Test public void performSubmitWithNewRequestQueuesHunter() throws Exception {\n     Action action = TestUtils.mockAction(URI_KEY_1, URI_1);\n     dispatcher.performSubmit(action);\n", "truth": "Added test to verify that recevier is in fact unregistered"}, {"prompt": "diff --git a/src/com/google/javascript/jscomp/InferJSDocInfo.java b/src/com/google/javascript/jscomp/InferJSDocInfo.java\nindex 6c7a4ad..b1d4bd5 100644\n--- a/src/com/google/javascript/jscomp/InferJSDocInfo.java\n+++ b/src/com/google/javascript/jscomp/InferJSDocInfo.java\n@@ -147,6 +147,8 @@ class InferJSDocInfo extends AbstractPostOrderCallback\n         break;\n \n       case Token.STRING_KEY:\n+      case Token.GETTER_DEF:\n+      case Token.SETTER_DEF:\n         docInfo = n.getJSDocInfo();\n         if (docInfo == null) {\n           return;\ndiff --git a/test/com/google/javascript/jscomp/CheckAccessControlsTest.java b/test/com/google/javascript/jscomp/CheckAccessControlsTest.java\nindex d157b94..725818f 100644\n--- a/test/com/google/javascript/jscomp/CheckAccessControlsTest.java\n+++ b/test/com/google/javascript/jscomp/CheckAccessControlsTest.java\n@@ -489,6 +489,26 @@ public class CheckAccessControlsTest extends CompilerTestCase {\n     }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n   }\n \n+  public void testNoPrivateAccessForProperties11() {\n+    test(new String[] {\n+      \"/** @constructor */ function Foo() {}\" +\n+      \"Foo.prototype = {\" +\n+      \"/** @private */ get bar_() { return 1; }\" +\n+      \"}\",\n+      \"var a = new Foo().bar_;\"\n+    }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n+  }\n+\n+  public void testNoPrivateAccessForProperties12() {\n+    test(new String[] {\n+      \"/** @constructor */ function Foo() {}\" +\n+      \"Foo.prototype = {\" +\n+      \"/** @private */ set bar_(x) { this.barValue = x; }\" +\n+      \"}\",\n+      \"new Foo().bar_ = 1;\"\n+    }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n+  }\n+\n   public void testProtectedAccessForProperties1() {\n     testSame(new String[] {\n       \"/** @constructor */ function Foo() {}\" +\n", "truth": "Handle the getter and setter case"}, {"prompt": "diff --git a/app/src/main/java/io/plaidapp/ui/PostNewDesignerNewsStory.java b/app/src/main/java/io/plaidapp/ui/PostNewDesignerNewsStory.java\nindex eca4230..267d258 100644\n--- a/app/src/main/java/io/plaidapp/ui/PostNewDesignerNewsStory.java\n+++ b/app/src/main/java/io/plaidapp/ui/PostNewDesignerNewsStory.java\n@@ -115,7 +115,9 @@ public class PostNewDesignerNewsStory extends Activity {\n \n         // check for share intent\n         if (getIntent() != null && Intent.ACTION_SEND.equals(getIntent().getAction())) {\n-            url.setText(ShareCompat.IntentReader.from(this).getText());\n+            ShareCompat.IntentReader intentReader = ShareCompat.IntentReader.from(this);\n+            url.setText(intentReader.getText());\n+            title.setText(intentReader.getSubject());\n \n             // when receiving a share there is no shared element transition so animate up the\n             // bottom sheet to establish the spatial model i.e. that it can be dismissed downward\n", "truth": "Make share intent use subject for title."}, {"prompt": "diff --git a/src/java/org/jivesoftware/messenger/muc/HistoryStrategy.java b/src/java/org/jivesoftware/messenger/muc/HistoryStrategy.java\nindex 1f184acf2..45a01be44 100644\n--- a/src/java/org/jivesoftware/messenger/muc/HistoryStrategy.java\n+++ b/src/java/org/jivesoftware/messenger/muc/HistoryStrategy.java\n@@ -249,4 +249,15 @@ public class HistoryStrategy {\n             }\n         }\n     }\n+\n+    /**\n+     * Returns true if there is a message within the history of the room that has changed the\n+     * room's subject.\n+     *\n+     * @return true if there is a message within the history of the room that has changed the\n+     *         room's subject.\n+     */\n+    public boolean hasChangedSubject() {\n+        return roomSubject != null;\n+    }\n }\n", "truth": "Added method #hasChangedHistory."}, {"prompt": "diff --git a/subprojects/core/src/main/java/org/gradle/process/internal/worker/child/WorkerProcessClassPathProvider.java b/subprojects/core/src/main/java/org/gradle/process/internal/worker/child/WorkerProcessClassPathProvider.java\nindex 97816ed..9a7fd91 100644\n--- a/subprojects/core/src/main/java/org/gradle/process/internal/worker/child/WorkerProcessClassPathProvider.java\n+++ b/subprojects/core/src/main/java/org/gradle/process/internal/worker/child/WorkerProcessClassPathProvider.java\n@@ -26,6 +26,7 @@ import org.gradle.internal.Factory;\n import org.gradle.internal.UncheckedException;\n import org.gradle.internal.classloader.ClassLoaderHierarchy;\n import org.gradle.internal.classloader.ClassLoaderSpec;\n+import org.gradle.internal.classloader.ClassLoaderUtils;\n import org.gradle.internal.classloader.ClassLoaderVisitor;\n import org.gradle.internal.classloader.FilteringClassLoader;\n import org.gradle.internal.classloader.SystemClassLoaderSpec;\n@@ -121,6 +122,7 @@ public class WorkerProcessClassPathProvider implements ClassPathProvider, Closea\n                         GradleWorkerMain.class,\n                         BootstrapSecurityManager.class,\n                         EncodedStream.EncodedInput.class,\n+                        ClassLoaderUtils.class,\n                         FilteringClassLoader.class,\n                         FilteringClassLoader.Spec.class,\n                         ClassLoaderHierarchy.class,\n", "truth": "Fixed construction of worker process launcher jar."}, {"prompt": "diff --git a/core/src/main/java/fi/iki/elonen/NanoHTTPD.java b/core/src/main/java/fi/iki/elonen/NanoHTTPD.java\nindex ce292a4..ccdddf8 100644\n--- a/core/src/main/java/fi/iki/elonen/NanoHTTPD.java\n+++ b/core/src/main/java/fi/iki/elonen/NanoHTTPD.java\n@@ -821,7 +821,7 @@ public abstract class NanoHTTPD {\n \n         /**\n          * Adds the files in the request body to the files map.\n-         * @arg files - map to modify\n+         * @param files map to modify\n          */\n         void parseBody(Map<String, String> files) throws IOException, ResponseException;\n     }\n", "truth": "Fix javadoc tag"}, {"prompt": "diff --git a/src/edu/stanford/nlp/parser/server/LexicalizedParserServer.java b/src/edu/stanford/nlp/parser/server/LexicalizedParserServer.java\nindex 0f86469..50fbc1f 100644\n--- a/src/edu/stanford/nlp/parser/server/LexicalizedParserServer.java\n+++ b/src/edu/stanford/nlp/parser/server/LexicalizedParserServer.java\n@@ -66,6 +66,8 @@ public class LexicalizedParserServer {\n       model = ParserGrammar.loadModel(parserModel);\n     } else {\n       model = ParserGrammar.loadModel(parserModel, \"-preTag\", \"-taggerSerializedFile\", taggerModel);\n+      // preload tagger so the first query doesn't take forever\n+      model.loadTagger();\n     }\n     model.setOptionFlags(model.defaultCoreNLPFlags());\n     return model;\n", "truth": "Preload tagger in LexicalizedParserServer"}, {"prompt": "diff --git a/core/src/main/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockWriter.java b/core/src/main/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockWriter.java\nindex e27482ce..39d7e417 100644\n--- a/core/src/main/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockWriter.java\n+++ b/core/src/main/java/com/twitter/elephantbird/mapreduce/io/BinaryBlockWriter.java\n@@ -22,7 +22,7 @@ public class BinaryBlockWriter<M> {\n   private int numRecordsWritten_ = 0;\n   private List<ByteString> protoBlobs_;\n \n-  public BinaryBlockWriter(OutputStream out, Class<M> protoClass, BinaryConverter<M> binaryConverter, int numRecordsPerBlock) {\n+  protected BinaryBlockWriter(OutputStream out, Class<M> protoClass, BinaryConverter<M> binaryConverter, int numRecordsPerBlock) {\n     out_ = out;\n     numRecordsPerBlock_ = numRecordsPerBlock;\n     innerClass_ = protoClass;\n", "truth": "make constructor protected"}, {"prompt": "diff --git a/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdResponse.java b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdResponse.java\nindex b38db62..c918c31 100644\n--- a/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdResponse.java\n+++ b/codec-socks/src/main/java/io/netty/handler/codec/socks/SocksCmdResponse.java\n@@ -90,8 +90,8 @@ public final class SocksCmdResponse extends SocksResponse {\n             }\n             host = IDN.toASCII(host);\n         }\n-        if (port <= 0 && port >= 65536) {\n-            throw new IllegalArgumentException(port + \" is not in bounds 0 < x < 65536\");\n+        if (port < 0 || port > 65535) {\n+            throw new IllegalArgumentException(port + \" is not in bounds 0 <= x <= 65535\");\n         }\n         this.cmdStatus = cmdStatus;\n         this.addressType = addressType;\n", "truth": "Correctly handle SocksCmdResponse."}, {"prompt": "diff --git a/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java b/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java\nindex 9bb2b69..6e2493e 100644\n--- a/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java\n+++ b/src/main/java/org/elasticsearch/indices/cluster/IndicesClusterStateService.java\n@@ -331,10 +331,6 @@ public class IndicesClusterStateService extends AbstractLifecycleComponent<Indic\n                 // we only create / update here\n                 continue;\n             }\n-            // if the index meta data didn't change, no need check for refreshed settings\n-            //if (!event.indexMetaDataChanged(indexMetaData)) {\n-            //    continue;\n-            //}\n             List<String> typesToRefresh = null;\n             String index = indexMetaData.index();\n             IndexService indexService = indicesService.indexServiceSafe(index);\n", "truth": "checking on index metadata does not make sense for mappings..."}, {"prompt": "diff --git a/community/src/java/org/neo4j/impl/shell/apps/Ls.java b/community/src/java/org/neo4j/impl/shell/apps/Ls.java\nindex c3eccc1..611f183 100644\n--- a/community/src/java/org/neo4j/impl/shell/apps/Ls.java\n+++ b/community/src/java/org/neo4j/impl/shell/apps/Ls.java\n@@ -49,7 +49,18 @@ public class Ls extends NeoApp\n \t\t\tdisplayProperties = true;\n \t\t\tdisplayRelationships = true;\n \t\t}\n-\t\tNode node = this.getCurrentNode( session );\n+\t\t\n+\t\tNode node = null;\n+\t\tif ( parser.arguments().isEmpty() )\n+\t\t{\n+\t\t\tnode = this.getCurrentNode( session );\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tnode = this.getNodeById(\n+\t\t\t\tLong.parseLong( parser.arguments().get( 0 ) ) );\n+\t\t}\n+\t\t\n \t\tthis.displayProperties( node, out, displayProperties, displayValues,\n \t\t\tverbose );\n \t\tthis.displayRelationships( parser, node, out, displayRelationships );\n", "truth": "Added ls <node-id> possibility"}, {"prompt": "diff --git a/curator-framework/src/main/java/com/netflix/curator/framework/api/ProtectACLCreateModePathAndBytesable.java b/curator-framework/src/main/java/com/netflix/curator/framework/api/ProtectACLCreateModePathAndBytesable.java\nindex 96f92c77..137542d2 100644\n--- a/curator-framework/src/main/java/com/netflix/curator/framework/api/ProtectACLCreateModePathAndBytesable.java\n+++ b/curator-framework/src/main/java/com/netflix/curator/framework/api/ProtectACLCreateModePathAndBytesable.java\n@@ -21,5 +21,33 @@ public interface ProtectACLCreateModePathAndBytesable<T> extends\n     ACLPathAndBytesable<T>,\n     CreateModable<ACLPathAndBytesable<T>>\n {\n+    /**\n+     * <p>\n+     *     Hat-tip to https://github.com/sbridges for pointing this out\n+     * </p>\n+     *\n+     * <p>\n+     *     It turns out there is an edge case that exists when creating sequential-ephemeral\n+     *     nodes. The creation can succeed on the server, but the server can crash before\n+     *     the created node name is returned to the client. However, the ZK session is still\n+     *     valid so the ephemeral node is not deleted. Thus, there is no way for the client to\n+     *     determine what node was created for them.\n+     * </p>\n+     *\n+     * <p>\n+     *     Even without sequential-ephemeral, however, the create can succeed on the sever\n+     *     but the client (for various reasons) will not know it.\n+     * </p>\n+     *\n+     * <p>\n+     *     Putting the create builder into protection mode works around this.\n+     *     The name of the node that is created is prefixed with a GUID. If node creation fails\n+     *     the normal retry mechanism will occur. On the retry, the parent path is first searched\n+     *     for a node that has the GUID in it. If that node is found, it is assumed to be the lost\n+     *     node that was successfully created on the first try and is returned to the caller.\n+     * </p>\n+     *\n+     * @return this\n+     */\n     public ACLCreateModePathAndBytesable<String>    withProtection();\n }\n", "truth": "Added copy of doc"}, {"prompt": "diff --git a/querydsl-core/src/main/java/com/querydsl/core/types/ExpressionUtils.java b/querydsl-core/src/main/java/com/querydsl/core/types/ExpressionUtils.java\nindex fa4bb8072..847640a50 100644\n--- a/querydsl-core/src/main/java/com/querydsl/core/types/ExpressionUtils.java\n+++ b/querydsl-core/src/main/java/com/querydsl/core/types/ExpressionUtils.java\n@@ -436,6 +436,18 @@ public final class ExpressionUtils {\n     /**\n      * Create a {@code left in right} expression\n      *\n+     * @param <D> type of expressions\n+     * @param left lhs of expression\n+     * @param right rhs of expression\n+     * @return left in right\n+     */\n+    public static <D> Predicate in(Expression<D> left, SubQueryExpression<? extends D> right) {\n+        return predicate(Ops.IN, left, right);\n+    }\n+\n+    /**\n+     * Create a {@code left in right} expression\n+     *\n      * @param <D> element type\n      * @param left lhs of expression\n      * @param right rhs of expression\n@@ -661,6 +673,18 @@ public final class ExpressionUtils {\n     /**\n      * Create a {@code left not in right} expression\n      *\n+     * @param <D> type of epressions\n+     * @param left lhs of expression\n+     * @param right rhs of expression\n+     * @return left not in right\n+     */\n+    public static <D> Predicate notIn(Expression<D> left, SubQueryExpression<? extends D> right) {\n+        return predicate(Ops.NOT_IN, left, right);\n+    }\n+\n+    /**\n+     * Create a {@code left not in right} expression\n+     *\n      * @param <D> tyoe of expressions\n      * @param left lhs of expression\n      * @param right rhs of expression\n", "truth": "Add in/notIn for subqueries"}, {"prompt": "diff --git a/guava/src/com/google/common/util/concurrent/Monitor.java b/guava/src/com/google/common/util/concurrent/Monitor.java\nindex 0fbf29b..7258de0 100644\n--- a/guava/src/com/google/common/util/concurrent/Monitor.java\n+++ b/guava/src/com/google/common/util/concurrent/Monitor.java\n@@ -307,12 +307,12 @@ public final class Monitor {\n    * @return whether the monitor was entered\n    */\n   public boolean enter(long time, TimeUnit unit) {\n+    long timeoutNanos = unit.toNanos(time);\n     final ReentrantLock lock = this.lock;\n     if (!fair && lock.tryLock()) {\n       return true;\n     }\n     long startNanos = System.nanoTime();\n-    long timeoutNanos = unit.toNanos(time);\n     long remainingNanos = timeoutNanos;\n     boolean interruptIgnored = false;\n     try {\n", "truth": "Move timeout start to before tryLock()."}, {"prompt": "diff --git a/src/main/com/mongodb/DBCollection.java b/src/main/com/mongodb/DBCollection.java\nindex af01eb55f..6288068f2 100644\n--- a/src/main/com/mongodb/DBCollection.java\n+++ b/src/main/com/mongodb/DBCollection.java\n@@ -410,14 +410,15 @@ public abstract class DBCollection {\n     /**\n      * Ensures an index on this collection (that is, the index will be created if it does not exist).\n      * @param keys fields to use for index\n-     * @param name an identifier for the index\n+     * @param name an identifier for the index. If null or empty, the default name will be used.\n      * @param unique if the index should be unique\n      * @throws MongoException\n      */\n     public void ensureIndex( DBObject keys , String name , boolean unique ) \n         throws MongoException {\n         DBObject options = defaultOptions( keys );\n-        options.put( \"name\" , name );\n+        if (name != null && !name.isEmpty())\n+            options.put( \"name\" , name );\n         if ( unique )\n             options.put( \"unique\" , Boolean.TRUE );\n         ensureIndex( keys , options );\n", "truth": "improved ensureIndex to use default index name if null is provided, instead of getting mongoexception"}, {"prompt": "diff --git a/plugins/maven/src/main/java/org/jetbrains/idea/maven/utils/MavenJDOMUtil.java b/plugins/maven/src/main/java/org/jetbrains/idea/maven/utils/MavenJDOMUtil.java\nindex c69f061..0f3997d 100644\n--- a/plugins/maven/src/main/java/org/jetbrains/idea/maven/utils/MavenJDOMUtil.java\n+++ b/plugins/maven/src/main/java/org/jetbrains/idea/maven/utils/MavenJDOMUtil.java\n@@ -59,6 +59,7 @@ public class MavenJDOMUtil {\n     return doRead(CharsetToolkit.bytesToString(bytes), handler);\n   }\n \n+  // todo: rewrite it using NanoXML. PSI is too heavy for this\n   @Nullable\n   private static Element doRead(String text, final ErrorHandler handler) {\n     final LinkedList<Element> stack = new LinkedList<Element>();\n", "truth": "rewrite it using NanoXML."}, {"prompt": "diff --git a/core/java/com/android/internal/app/ResolverActivity.java b/core/java/com/android/internal/app/ResolverActivity.java\nindex 661acbe..649a59f 100644\n--- a/core/java/com/android/internal/app/ResolverActivity.java\n+++ b/core/java/com/android/internal/app/ResolverActivity.java\n@@ -343,7 +343,7 @@ public class ResolverActivity extends Activity implements AdapterView.OnItemClic\n                     }\n \n                     final Intent intent = intentForDisplayResolveInfo(dri);\n-                    onIntentSelected(dri.ri, intent, mAlwaysUseOption);\n+                    onIntentSelected(dri.ri, intent, false);\n                     finish();\n                 }\n             });\n", "truth": "Never set \"Work\" or \"Personal apps\" as prefered activities."}, {"prompt": "diff --git a/liquibase-core/src/main/java/liquibase/change/core/SQLFileChange.java b/liquibase-core/src/main/java/liquibase/change/core/SQLFileChange.java\nindex df1e02d63..2c6ce3def 100644\n--- a/liquibase-core/src/main/java/liquibase/change/core/SQLFileChange.java\n+++ b/liquibase-core/src/main/java/liquibase/change/core/SQLFileChange.java\n@@ -98,7 +98,7 @@ public class SQLFileChange extends AbstractSQLChange {\n             try {\n                 innputStream = openFromFileSystem(path);\n                 if (innputStream == null) {\n-                    throw new IOException(\"No file found\");\n+                    return null;\n                 }\n             } catch (IOException e) {\n                 throw new IOException(\"<sqlfile path=\" + path + \"> -Unable to read file\", e);\ndiff --git a/liquibase-core/src/test/java/liquibase/change/core/SQLFileChangeTest.java b/liquibase-core/src/test/java/liquibase/change/core/SQLFileChangeTest.java\nindex ba92b9d6c..b10b3eec5 100644\n--- a/liquibase-core/src/test/java/liquibase/change/core/SQLFileChangeTest.java\n+++ b/liquibase-core/src/test/java/liquibase/change/core/SQLFileChangeTest.java\n@@ -82,18 +82,18 @@ public class SQLFileChangeTest extends StandardChangeTest {\n //    \tassertEquals(MD5Util.computeMD5(change.getSql()), change.generateCheckSum());\n //\t}\n     \n-    @Test\n-    public void generateStatementFileNotFound() throws Exception {\n-        try {\n-            change.setPath(\"doesnotexist.sql\");\n-            change.finishInitialization();\n-            change.generateStatements(new OracleDatabase());\n-            \n-            fail(\"The file does not exist so should not be found\");\n-        } catch(SetupException fnfe) {\n-            //expected\n-        }\n-    }\n+//    @Test\n+//    public void generateStatementFileNotFound() throws Exception {\n+//        try {\n+//            change.setPath(\"doesnotexist.sql\");\n+//            change.finishInitialization();\n+//            change.generateStatements(new OracleDatabase());\n+//\n+//            fail(\"The file does not exist so should not be found\");\n+//        } catch(SetupException fnfe) {\n+//            //expected\n+//        }\n+//    }\n     \n //    @Test\n //    public void multiLineSQLFileSemiColon() throws Exception {\n", "truth": "Fixed failing tests"}, {"prompt": "diff --git a/compiler/cli/src/org/jetbrains/jet/cli/js/K2JSCompiler.java b/compiler/cli/src/org/jetbrains/jet/cli/js/K2JSCompiler.java\nindex 6898c93..a0e3346 100644\n--- a/compiler/cli/src/org/jetbrains/jet/cli/js/K2JSCompiler.java\n+++ b/compiler/cli/src/org/jetbrains/jet/cli/js/K2JSCompiler.java\n@@ -35,6 +35,8 @@ import org.jetbrains.jet.cli.common.messages.CompilerMessageLocation;\n import org.jetbrains.jet.cli.common.messages.CompilerMessageSeverity;\n import org.jetbrains.jet.cli.common.messages.PrintingMessageCollector;\n import org.jetbrains.jet.cli.jvm.compiler.JetCoreEnvironment;\n+import org.jetbrains.jet.config.CommonConfigurationKeys;\n+import org.jetbrains.jet.config.CompilerConfiguration;\n import org.jetbrains.jet.lang.psi.JetFile;\n import org.jetbrains.k2js.analyze.AnalyzerFacadeForJS;\n import org.jetbrains.k2js.config.*;\n@@ -72,7 +74,7 @@ public class K2JSCompiler extends CLICompiler<K2JSCompilerArguments, K2JSCompile\n             return ExitCode.INTERNAL_ERROR;\n         }\n \n-        JetCoreEnvironment environmentForJS = JetCoreEnvironment.createCoreEnvironmentForJS(rootDisposable);\n+        JetCoreEnvironment environmentForJS = JetCoreEnvironment.createCoreEnvironmentForJS(rootDisposable, new CompilerConfiguration());\n \n         for (String sourceFile : arguments.sourceFiles) {\n             environmentForJS.addSources(sourceFile);\ndiff --git a/compiler/cli/src/org/jetbrains/jet/cli/jvm/compiler/JetCoreEnvironment.java b/compiler/cli/src/org/jetbrains/jet/cli/jvm/compiler/JetCoreEnvironment.java\nindex c3af169..ec555b9 100644\n--- a/compiler/cli/src/org/jetbrains/jet/cli/jvm/compiler/JetCoreEnvironment.java\n+++ b/compiler/cli/src/org/jetbrains/jet/cli/jvm/compiler/JetCoreEnvironment.java\n@@ -54,8 +54,8 @@ public class JetCoreEnvironment extends JavaCoreEnvironment {\n     private final CoreAnnotationsProvider annotationsProvider;\n \n     @NotNull\n-    public static JetCoreEnvironment createCoreEnvironmentForJS(Disposable disposable) {\n-        return new JetCoreEnvironment(disposable, new CompilerConfiguration());\n+    public static JetCoreEnvironment createCoreEnvironmentForJS(Disposable disposable, @NotNull CompilerConfiguration configuration) {\n+        return new JetCoreEnvironment(disposable, configuration);\n     }\n \n     @NotNull\n", "truth": "Added parameter to JetCoreEnvironment.createCoreEnvironmentForJS."}, {"prompt": "diff --git a/liquibase-core/src/main/java/liquibase/sqlgenerator/core/AddColumnGenerator.java b/liquibase-core/src/main/java/liquibase/sqlgenerator/core/AddColumnGenerator.java\nindex 0566a33fa..163f89e78 100644\n--- a/liquibase-core/src/main/java/liquibase/sqlgenerator/core/AddColumnGenerator.java\n+++ b/liquibase-core/src/main/java/liquibase/sqlgenerator/core/AddColumnGenerator.java\n@@ -96,7 +96,7 @@ public class AddColumnGenerator extends AbstractSqlGenerator<AddColumnStatement>\n                 String refTableName = referencesMatcher.group(1);\r\n                 if (refTableName.indexOf(\".\") > 0) {\r\n                     refSchemaName = refTableName.split(\"\\\\.\")[0];\r\n-                    refTableName = refTableName.split(\"\\\\.\")[0];\r\n+                    refTableName = refTableName.split(\"\\\\.\")[1];\r\n                 }\r\n                 String refColName = referencesMatcher.group(2);\r\n \r\n", "truth": "Fixed bug via patch from Marat Tukhvatullin"}, {"prompt": "diff --git a/services/core/java/com/android/server/audio/AudioService.java b/services/core/java/com/android/server/audio/AudioService.java\nindex eef3d63..1223a00 100644\n--- a/services/core/java/com/android/server/audio/AudioService.java\n+++ b/services/core/java/com/android/server/audio/AudioService.java\n@@ -5126,6 +5126,11 @@ public class AudioService extends IAudioService.Stub {\n             if (UserHandle.getAppId(pkg.applicationInfo.uid) < FIRST_APPLICATION_UID) {\n                 continue;\n             }\n+            // Skip packages that have permission to interact across users\n+            if (pm.checkPermission(Manifest.permission.INTERACT_ACROSS_USERS, pkg.packageName)\n+                    == PackageManager.PERMISSION_GRANTED) {\n+                continue;\n+            }\n             if (homeActivityName != null\n                     && pkg.packageName.equals(homeActivityName.getPackageName())\n                     && pkg.applicationInfo.isSystemApp()) {\n", "truth": "Don't kill apps that are multi-user aware..."}, {"prompt": "diff --git a/astrid/src-legacy/com/timsu/astrid/data/task/TaskController.java b/astrid/src-legacy/com/timsu/astrid/data/task/TaskController.java\nindex 0d40dd417..5c1e28057 100644\n--- a/astrid/src-legacy/com/timsu/astrid/data/task/TaskController.java\n+++ b/astrid/src-legacy/com/timsu/astrid/data/task/TaskController.java\n@@ -131,8 +131,7 @@ public class TaskController extends AbstractController {\n     /** Return a list of all tasks */\n     public Cursor getBackupTaskListCursor() {\n         return database.query(tasksTable, TaskModelForXml.FIELD_LIST,\n-                AbstractTaskModel.PROGRESS_PERCENTAGE + \" < \" +\n-                        AbstractTaskModel.COMPLETE_PERCENTAGE, null, null, null,\n+                null, null, null, null,\n                 null, null);\n     }\n \n", "truth": "Legacy backup now backs up completed tasks"}, {"prompt": "diff --git a/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java b/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java\nindex d38a7561c..68fab153c 100644\n--- a/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java\n+++ b/java/org/apache/catalina/ha/tcp/SimpleTcpCluster.java\n@@ -426,8 +426,7 @@ public class SimpleTcpCluster extends LifecycleMBeanBase\n             log.warn(sm.getString(\"simpleTcpCluster.clustermanager.notImplement\", manager));\n             return;\n         }\n-        ClusterManager cmanager = (ClusterManager) manager ;\n-        cmanager.setDistributable(true);\n+        ClusterManager cmanager = (ClusterManager) manager;\n         // Notify our interested LifecycleListeners\n         fireLifecycleEvent(BEFORE_MANAGERREGISTER_EVENT, manager);\n         String clusterName = getManagerName(cmanager.getName(), manager);\n", "truth": "Remove unnecessary code."}, {"prompt": "diff --git a/h2o-core/src/main/java/hex/ModelMetrics.java b/h2o-core/src/main/java/hex/ModelMetrics.java\nindex 9e0401573..ce1e53f56 100755\n--- a/h2o-core/src/main/java/hex/ModelMetrics.java\n+++ b/h2o-core/src/main/java/hex/ModelMetrics.java\n@@ -144,7 +144,9 @@ public class ModelMetrics extends Keyed<ModelMetrics> {\n     public double _wYY; // (Weighted) sum of the squared response\n \n     public  double weightedSigma() {\n-      return _count <= 1 ? 0 : Math.sqrt(_count/(_count-1)*(_wYY/_wcount - (_wY*_wY)/(_wcount*_wcount)));\n+//      double sampleCorrection = _count/(_count-1); //sample variance -> depends on the number of ACTUAL ROWS (not the weighted count)\n+      double sampleCorrection = 1; //this will make the result (and R^2) invariant to globally scaling the weights\n+      return _count <= 1 ? 0 : Math.sqrt(sampleCorrection*(_wYY/_wcount - (_wY*_wY)/(_wcount*_wcount)));\n     }\n     abstract public double[] perRow(double ds[], float yact[], Model m);\n     public double[] perRow(double ds[], float yact[],double weight, double offset,  Model m) {\n", "truth": "Don't use sample weighted variance, but full weighted variance."}, {"prompt": "diff --git a/src/net/java/sip/communicator/impl/splashscreen/SplashScreenActivator.java b/src/net/java/sip/communicator/impl/splashscreen/SplashScreenActivator.java\nindex afab63137..409b007f6 100644\n--- a/src/net/java/sip/communicator/impl/splashscreen/SplashScreenActivator.java\n+++ b/src/net/java/sip/communicator/impl/splashscreen/SplashScreenActivator.java\n@@ -112,6 +112,21 @@ public class SplashScreenActivator\n                 if(bundleName == null)\n                     return;\n \n+                // If the main frame was set visible, the splash screen was/will\n+                // be closed by Java automatically. Otherwise we need to do that\n+                // manually.\n+                Object service =\n+                    bundleContext\n+                        .getService(serviceEvent.getServiceReference());\n+                if (service.getClass().getSimpleName().equals(\"UIServiceImpl\"))\n+                {\n+                    splash.close();\n+                    stop(bundleContext);\n+                    return;\n+                }\n+\n+                bundleContext.ungetService(serviceEvent.getServiceReference());\n+\n                 progress++;\n \n                 int progressWidth = 233;\n", "truth": "Hide splash screen when main window is iconified on startup"}, {"prompt": "diff --git a/core/java/android/content/Intent.java b/core/java/android/content/Intent.java\nindex 06da495..e18fde5 100644\n--- a/core/java/android/content/Intent.java\n+++ b/core/java/android/content/Intent.java\n@@ -1575,6 +1575,14 @@ public class Intent implements Parcelable, Cloneable {\n             = \"android.intent.extra.UNINSTALL_ALL_USERS\";\n \n     /**\n+     * Specified when the uninstall confirmation dialog is not required to be shown.\n+     * Use with {@link #ACTION_UNINSTALL_PACKAGE}\n+     * @hide\n+     */\n+    public static final String EXTRA_SKIP_UNINSTALL_CONFIRMATION =\n+            \"android.intent.extra.SKIP_UNINSTALL_CONFIRMATION\";\n+\n+    /**\n      * A string associated with a {@link #ACTION_UPGRADE_SETUP} activity\n      * describing the last run version of the platform that was setup.\n      * @hide\n", "truth": "Added a constant to be used as an Intent extra"}, {"prompt": "diff --git a/src/main/com/mongodb/BulkWriteError.java b/src/main/com/mongodb/BulkWriteError.java\nindex 95e525039..fe1690b7e 100644\n--- a/src/main/com/mongodb/BulkWriteError.java\n+++ b/src/main/com/mongodb/BulkWriteError.java\n@@ -115,4 +115,14 @@ public class BulkWriteError {\n         result = 31 * result + details.hashCode();\n         return result;\n     }\n+\n+    @Override\n+    public String toString() {\n+        return \"BulkWriteError{\"\n+               + \"index=\" + index\n+               + \", code=\" + code\n+               + \", message='\" + message + '\\''\n+               + \", details=\" + details\n+               + '}';\n+    }\n }\n", "truth": "Implemented BulkWriteError.toString"}, {"prompt": "diff --git a/core/src/main/java/com/mongodb/hadoop/util/MongoConfigUtil.java b/core/src/main/java/com/mongodb/hadoop/util/MongoConfigUtil.java\nindex 4184248..b368413 100644\n--- a/core/src/main/java/com/mongodb/hadoop/util/MongoConfigUtil.java\n+++ b/core/src/main/java/com/mongodb/hadoop/util/MongoConfigUtil.java\n@@ -451,7 +451,10 @@ public final class MongoConfigUtil {\n     public static void setOutputURI(final Configuration conf, final String uri) {\n         setMongoURIString(conf, OUTPUT_URI, uri);\n     }\n-\n+     /**\n+     * @deprecated use {@link #setOutputURI(Configuration, MongoClientURI)} instead\n+     */\n+    @Deprecated\n     public static void setOutputURI(final Configuration conf, final MongoURI uri) {\n         setMongoURI(conf, OUTPUT_URI, uri);\n     }\n", "truth": "Deprecate old signature of setOutputURI() that takes MongoURI"}, {"prompt": "diff --git a/OsmAnd/src/net/osmand/plus/liveupdates/LiveUpdatesSettingsDialogFragment.java b/OsmAnd/src/net/osmand/plus/liveupdates/LiveUpdatesSettingsDialogFragment.java\nindex 3a34111aff..879f04e25a 100644\n--- a/OsmAnd/src/net/osmand/plus/liveupdates/LiveUpdatesSettingsDialogFragment.java\n+++ b/OsmAnd/src/net/osmand/plus/liveupdates/LiveUpdatesSettingsDialogFragment.java\n@@ -73,7 +73,7 @@ public class LiveUpdatesSettingsDialogFragment extends DialogFragment {\n \t\tdownloadOverWiFiSwitch.setChecked(downloadViaWiFiPreference.get());\n \n \t\tbuilder.setView(view)\n-\t\t\t\t.setPositiveButton(R.string.shared_string_save, new DialogInterface.OnClickListener() {\n+\t\t\t\t.setPositiveButton(R.string.shared_string_ok, new DialogInterface.OnClickListener() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n \t\t\t\t\t\tfinal int updateFrequencyInt = updateFrequencySpinner.getSelectedItemPosition();\n", "truth": "Replaced saved button in dialog with ok."}, {"prompt": "diff --git a/src/java/org/jivesoftware/wildfire/muc/MUCRoomHistory.java b/src/java/org/jivesoftware/wildfire/muc/MUCRoomHistory.java\nindex 9db1f1227..ef69e304f 100644\n--- a/src/java/org/jivesoftware/wildfire/muc/MUCRoomHistory.java\n+++ b/src/java/org/jivesoftware/wildfire/muc/MUCRoomHistory.java\n@@ -12,9 +12,9 @@\n package org.jivesoftware.wildfire.muc;\r\n \r\n import org.dom4j.Element;\r\n-import org.jivesoftware.wildfire.user.UserNotFoundException;\r\n import org.jivesoftware.util.FastDateFormat;\r\n import org.jivesoftware.util.JiveConstants;\r\n+import org.jivesoftware.wildfire.user.UserNotFoundException;\r\n import org.xmpp.packet.JID;\r\n import org.xmpp.packet.Message;\r\n \r\n@@ -61,6 +61,12 @@ public final class MUCRoomHistory {\n             }\r\n         }\r\n \r\n+        // Ignore messages with no subject AND no body\r\n+        if ((packet.getSubject() == null || \"\".equals(packet.getSubject().trim())) &&\r\n+                (packet.getBody() == null || \"\".equals(packet.getBody().trim()))) {\r\n+            return;\r\n+        }\r\n+\r\n         Message packetToAdd = packet.createCopy();\r\n \r\n         // Check if the room has changed its configuration\r\n", "truth": "Ignore messages with no body and no subject."}, {"prompt": "diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/RemoteInputView.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/RemoteInputView.java\nindex c6659d1..d9e8bd9 100644\n--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/RemoteInputView.java\n+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/RemoteInputView.java\n@@ -248,9 +248,11 @@ public class RemoteInputView extends LinearLayout implements View.OnClickListene\n         }\n \n         @Override\n-        protected void onFocusLost() {\n-            super.onFocusLost();\n-            defocusIfNeeded();\n+        protected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect) {\n+            super.onFocusChanged(focused, direction, previouslyFocusedRect);\n+            if (!focused) {\n+                defocusIfNeeded();\n+            }\n         }\n \n         @Override\n", "truth": "Don't close RemoteInputView on window focus loss"}, {"prompt": "diff --git a/jodd-db/src/main/java/jodd/db/DbQueryBase.java b/jodd-db/src/main/java/jodd/db/DbQueryBase.java\nindex 771624a3..92685269 100644\n--- a/jodd-db/src/main/java/jodd/db/DbQueryBase.java\n+++ b/jodd-db/src/main/java/jodd/db/DbQueryBase.java\n@@ -42,7 +42,7 @@ import java.util.HashSet;\n /**\n  * Support for {@link DbQuery} holds all configuration, initialization and the execution code.\n  */\n-abstract class DbQueryBase {\n+abstract class DbQueryBase implements AutoCloseable {\n \n \tprivate static final Logger log = LoggerFactory.getLogger(DbQueryBase.class);\n \ndiff --git a/jodd-db/src/main/java/jodd/db/DbSession.java b/jodd-db/src/main/java/jodd/db/DbSession.java\nindex d8764a54..c3e00c82 100644\n--- a/jodd-db/src/main/java/jodd/db/DbSession.java\n+++ b/jodd-db/src/main/java/jodd/db/DbSession.java\n@@ -44,7 +44,7 @@ import java.util.HashSet;\n  * <p>\n  * For managed transaction see <code>DbJtxTransactionManager</code> from <b>jodd-tx</b>.\n  */\n-public class DbSession {\n+public class DbSession implements AutoCloseable {\n \n \tprivate static final Logger log = LoggerFactory.getLogger(DbSession.class);\n \n@@ -116,6 +116,11 @@ public class DbSession {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void close() throws Exception {\n+\t\tcloseSession();\n+\t}\n+\n \t/**\n \t * Indicates whether a session is closed.\n \t */\ndiff --git a/jodd-db/src/main/java/jodd/db/connection/ConnectionProvider.java b/jodd-db/src/main/java/jodd/db/connection/ConnectionProvider.java\nindex d77f6dab..a6ea4d83 100644\n--- a/jodd-db/src/main/java/jodd/db/connection/ConnectionProvider.java\n+++ b/jodd-db/src/main/java/jodd/db/connection/ConnectionProvider.java\n@@ -34,7 +34,7 @@ import java.sql.Connection;\n  * <p>\n  * Implementations should provide a public default constructor.\n  */\n-public interface ConnectionProvider {\n+public interface ConnectionProvider extends AutoCloseable {\n \n \t/**\n \t * Initialize the connection provider. Properties are provided either\n", "truth": "Added few AutoCloseable interfaces"}, {"prompt": "diff --git a/codeInsight/impl/com/intellij/codeInsight/editorActions/SelectWordHandler.java b/codeInsight/impl/com/intellij/codeInsight/editorActions/SelectWordHandler.java\nindex 99189d0..0e72169 100644\n--- a/codeInsight/impl/com/intellij/codeInsight/editorActions/SelectWordHandler.java\n+++ b/codeInsight/impl/com/intellij/codeInsight/editorActions/SelectWordHandler.java\n@@ -80,9 +80,17 @@ public class SelectWordHandler extends EditorActionHandler {\n     }\n \n     while (element instanceof PsiWhiteSpace) {\n-      if (element.getNextSibling() == null) {\n-        element = element.getParent();\n-        continue;\n+      nextParent: while (element.getNextSibling() == null) {\n+        final PsiElement parent = element.getParent();\n+        final PsiElement[] children = parent.getChildren();\n+\n+        if (children[children.length - 1] == element) {\n+          element = parent;\n+        }\n+        else {\n+          element = parent;\n+          break nextParent;\n+        }\n       }\n \n       element = element.getNextSibling();\n", "truth": "Improved selection at first column in XML"}, {"prompt": "diff --git a/src/main/java/org/bukkit/event/block/BlockFromToEvent.java b/src/main/java/org/bukkit/event/block/BlockFromToEvent.java\nindex ab1927de..09bde18c 100644\n--- a/src/main/java/org/bukkit/event/block/BlockFromToEvent.java\n+++ b/src/main/java/org/bukkit/event/block/BlockFromToEvent.java\n@@ -9,14 +9,14 @@ import org.bukkit.event.Event;\n  * Holds information for events with a source block and a destination block\r\n  */\r\n public class BlockFromToEvent extends BlockEvent implements Cancellable {\r\n-    protected Block from;\r\n+    protected Block to;\r\n     protected BlockFace face;\r\n     protected boolean cancel;\r\n \r\n     public BlockFromToEvent(final Event.Type type, final Block block, final BlockFace face) {\r\n         super(type, block);\r\n         this.face = face;\r\n-        this.from = block.getRelative(face.getModX(), face.getModY(), face.getModZ());\r\n+        this.to = block.getRelative(face.getModX(), face.getModY(), face.getModZ());\r\n         this.cancel = false;\r\n     }\r\n \r\n@@ -34,8 +34,8 @@ public class BlockFromToEvent extends BlockEvent implements Cancellable {\n      * \r\n      * @return Block the faced block\r\n      */\r\n-    public Block getFromBlock() {\r\n-        return from; \r\n+    public Block getToBlock() {\r\n+        return to; \r\n     }\r\n \r\n     public boolean isCancelled() {\r\n", "truth": "Fixed BlockFromToEvent not knowing source block from destination block."}, {"prompt": "diff --git a/src/org/opensolaris/opengrok/history/Repository.java b/src/org/opensolaris/opengrok/history/Repository.java\nindex 72a59703..0282040e 100644\n--- a/src/org/opensolaris/opengrok/history/Repository.java\n+++ b/src/org/opensolaris/opengrok/history/Repository.java\n@@ -398,7 +398,7 @@ public abstract class Repository extends RepositoryInfo {\n             {\n                 // initialize date formatters\n                 for (int i = 0; i < datePatterns.length; i++) {\n-                    formatters[i] = new SimpleDateFormat(datePatterns[i], Locale.US);\n+                    formatters[i] = new SimpleDateFormat(datePatterns[i]);\n                     /*\n                      * TODO: the following would be nice - but currently it\n                      * could break the compatibility with some repository dates\n", "truth": "changing the locale from US to default"}, {"prompt": "diff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAlarmSensorCommandClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAlarmSensorCommandClass.java\nindex bb03efc..8282eee 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAlarmSensorCommandClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveAlarmSensorCommandClass.java\n@@ -19,10 +19,10 @@ import org.openhab.binding.zwave.internal.protocol.SerialMessage;\n import org.openhab.binding.zwave.internal.protocol.ZWaveController;\n import org.openhab.binding.zwave.internal.protocol.ZWaveEndpoint;\n import org.openhab.binding.zwave.internal.protocol.ZWaveNode;\n-import org.openhab.binding.zwave.internal.protocol.NodeStage;\n import org.openhab.binding.zwave.internal.protocol.SerialMessage.SerialMessageClass;\n import org.openhab.binding.zwave.internal.protocol.SerialMessage.SerialMessagePriority;\n import org.openhab.binding.zwave.internal.protocol.SerialMessage.SerialMessageType;\n+import org.openhab.binding.zwave.internal.protocol.NodeStage;\n import org.openhab.binding.zwave.internal.protocol.event.ZWaveCommandClassValueEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\ndiff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java\nindex b15c209..0e5159a 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBatteryCommandClass.java\n@@ -18,8 +18,8 @@ import org.openhab.binding.zwave.internal.protocol.ZWaveNode;\n import org.openhab.binding.zwave.internal.protocol.SerialMessage.SerialMessageClass;\n import org.openhab.binding.zwave.internal.protocol.SerialMessage.SerialMessagePriority;\n import org.openhab.binding.zwave.internal.protocol.SerialMessage.SerialMessageType;\n-import org.openhab.binding.zwave.internal.protocol.event.ZWaveCommandClassValueEvent;\n import org.openhab.binding.zwave.internal.protocol.NodeStage;\n+import org.openhab.binding.zwave.internal.protocol.event.ZWaveCommandClassValueEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \ndiff --git a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBinarySwitchCommandClass.java b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBinarySwitchCommandClass.java\nindex 1226ef2..fd37342 100644\n--- a/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBinarySwitchCommandClass.java\n+++ b/bundles/binding/org.openhab.binding.zwave/src/main/java/org/openhab/binding/zwave/internal/protocol/commandclass/ZWaveBinarySwitchCommandClass.java\n@@ -18,8 +18,8 @@ import org.openhab.binding.zwave.internal.protocol.ZWaveNode;\n import org.openhab.binding.zwave.internal.protocol.SerialMessage.SerialMessageClass;\n import org.openhab.binding.zwave.internal.protocol.SerialMessage.SerialMessagePriority;\n import org.openhab.binding.zwave.internal.protocol.SerialMessage.SerialMessageType;\n-import org.openhab.binding.zwave.internal.protocol.event.ZWaveCommandClassValueEvent;\n import org.openhab.binding.zwave.internal.protocol.NodeStage;\n+import org.openhab.binding.zwave.internal.protocol.event.ZWaveCommandClassValueEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n", "truth": "Revert files where only import order had changed."}, {"prompt": "diff --git a/android/sdk/src/main/java/com/taobao/weex/WXSDKEngine.java b/android/sdk/src/main/java/com/taobao/weex/WXSDKEngine.java\nindex 49a824b..7dc0cfc 100755\n--- a/android/sdk/src/main/java/com/taobao/weex/WXSDKEngine.java\n+++ b/android/sdk/src/main/java/com/taobao/weex/WXSDKEngine.java\n@@ -345,7 +345,7 @@ public class WXSDKEngine {\n    * {@link WXModuleManager#registerModule(String, ModuleFactory, boolean)}\n    */\n   public static <T extends WXModule> boolean registerModule(String moduleName, Class<T> moduleClass,boolean global) throws WXException {\n-    return registerModule(moduleName, new TypeModuleFactory(moduleClass),global);\n+    return moduleClass != null && registerModule(moduleName, new TypeModuleFactory<>(moduleClass), global);\n   }\n \n   /**\n", "truth": "[android] stop register when class is null"}, {"prompt": "diff --git a/src/main/java/org/terasology/engine/CoreRegistry.java b/src/main/java/org/terasology/engine/CoreRegistry.java\nindex 0b5118e13..057b6e455 100644\n--- a/src/main/java/org/terasology/engine/CoreRegistry.java\n+++ b/src/main/java/org/terasology/engine/CoreRegistry.java\n@@ -28,8 +28,8 @@ import java.util.Set;\n  * @author Immortius <immortius@gmail.com>\n  */\n public class CoreRegistry {\n-    private static Map<Class<? extends Object>, Object> store = Maps.newHashMap();\n-    private static Set<Class<? extends Object>> permStore = Sets.newHashSet();\n+    private static Map<Class<? extends Object>, Object> store = Maps.newConcurrentMap();\n+    private static Set<Class<? extends Object>> permStore = Sets.newSetFromMap(Maps.<Class<? extends Object>, Boolean>newConcurrentMap());\n \n     /**\n      * Registers a core system\n", "truth": "Changed core registry to use ConcurrentMaps to be thread-safe."}, {"prompt": "diff --git a/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java b/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java\nindex d5eaf3f7ca..1953fe9191 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java\n@@ -101,7 +101,7 @@ public class MulticastProcessor extends ServiceSupport implements Processor, Nav\n \n     private final CamelContext camelContext;\n     private Collection<Processor> processors;\n-    private AggregationStrategy aggregationStrategy;\n+    private final AggregationStrategy aggregationStrategy;\n     private final boolean parallelProcessing;\n     private final boolean streaming;\n     private final boolean stopOnException;\n@@ -408,10 +408,6 @@ public class MulticastProcessor extends ServiceSupport implements Processor, Nav\n         return aggregationStrategy;\n     }\n \n-    public void setAggregationStrategy(AggregationStrategy aggregationStrategy) {\n-        this.aggregationStrategy = aggregationStrategy;\n-    }\n-\n     public boolean isParallelProcessing() {\n         return parallelProcessing;\n     }\n", "truth": "Splitter now returns original exchange as outbound by default."}, {"prompt": "diff --git a/PreviewAPI/src/org/gephi/preview/PDFRenderTargetBuilder.java b/PreviewAPI/src/org/gephi/preview/PDFRenderTargetBuilder.java\nindex f8373ba95..2aba2332a 100644\n--- a/PreviewAPI/src/org/gephi/preview/PDFRenderTargetBuilder.java\n+++ b/PreviewAPI/src/org/gephi/preview/PDFRenderTargetBuilder.java\n@@ -103,7 +103,7 @@ public class PDFRenderTargetBuilder implements RenderTargetBuilder {\n             double scale = (float) (ratioWidth < ratioHeight ? ratioWidth : ratioHeight);\n             double translateX = (marginLeft + pageWidth / 2.) / scale;\n             double translateY = (marginBottom + pageHeight / 2.) / scale;\n-            cb.transform(AffineTransform.getTranslateInstance(-centerX * scale, -centerY * scale));\n+            cb.transform(AffineTransform.getTranslateInstance(-centerX * scale, centerY * scale));\n             cb.transform(AffineTransform.getScaleInstance(scale, scale));\n             cb.transform(AffineTransform.getTranslateInstance(translateX, translateY));\n \ndiff --git a/PreviewAPI/src/org/gephi/preview/PreviewControllerImpl.java b/PreviewAPI/src/org/gephi/preview/PreviewControllerImpl.java\nindex 06497fb30..a3cedb64b 100644\n--- a/PreviewAPI/src/org/gephi/preview/PreviewControllerImpl.java\n+++ b/PreviewAPI/src/org/gephi/preview/PreviewControllerImpl.java\n@@ -185,6 +185,7 @@ public class PreviewControllerImpl implements PreviewController {\n                 bottomRightY = y;\n             }\n         }\n+\n         float marginWidth = (bottomRightX - topLeftX) * (margin / 100f);\n         float marginHeight = (bottomRightY - topLeftY) * (margin / 100f);\n         topLeftX -= marginWidth;\n", "truth": "Fix PDF export transformation on y"}, {"prompt": "diff --git a/components/camel-cxf-transport/src/main/java/org/apache/camel/component/cxf/transport/CamelOutputStream.java b/components/camel-cxf-transport/src/main/java/org/apache/camel/component/cxf/transport/CamelOutputStream.java\nindex 284e03b00e..556edf4341 100644\n--- a/components/camel-cxf-transport/src/main/java/org/apache/camel/component/cxf/transport/CamelOutputStream.java\n+++ b/components/camel-cxf-transport/src/main/java/org/apache/camel/component/cxf/transport/CamelOutputStream.java\n@@ -1,3 +1,19 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *      http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n package org.apache.camel.component.cxf.transport;\r\n \r\n import java.io.IOException;\r\n", "truth": "Fixed the CS error of camel-cxf-transport"}, {"prompt": "diff --git a/OsmAnd/src/net/osmand/plus/views/PointNavigationLayer.java b/OsmAnd/src/net/osmand/plus/views/PointNavigationLayer.java\nindex f87a7c247d..a523ee4e73 100644\n--- a/OsmAnd/src/net/osmand/plus/views/PointNavigationLayer.java\n+++ b/OsmAnd/src/net/osmand/plus/views/PointNavigationLayer.java\n@@ -95,6 +95,7 @@ public class PointNavigationLayer extends OsmandMapLayer implements\n \t\t\t\tfloat locationY = getPointY(tb, pointToStart);\n \t\t\t\tcanvas.rotate(-tb.getRotate(), locationX, locationY);\n \t\t\t\tcanvas.drawBitmap(mStartPoint, locationX - marginX, locationY - marginY, mBitmapPaint);\n+\t\t\t\tcanvas.rotate(tb.getRotate(), locationX, locationY);\n \t\t\t}\n \t\t}\n \n@@ -122,6 +123,7 @@ public class PointNavigationLayer extends OsmandMapLayer implements\n \t\t\tfloat locationY = getPointY(tb, pointToNavigate);\n \t\t\tcanvas.rotate(-tb.getRotate(), locationX, locationY);\n \t\t\tcanvas.drawBitmap(mTargetPoint, locationX - marginX, locationY - marginY, mBitmapPaint);\n+\t\t\tcanvas.rotate(tb.getRotate(), locationX, locationY);\n \t\t}\n \n \t\tIterator<TargetPoint> it = targetPoints.getIntermediatePoints().iterator();\n", "truth": "Fix wrong rotation"}, {"prompt": "diff --git a/advanced/src/main/java/org/neo4j/kernel/impl/ha/IdAllocation.java b/advanced/src/main/java/org/neo4j/kernel/impl/ha/IdAllocation.java\nindex 6cfa6f0..29b1924 100644\n--- a/advanced/src/main/java/org/neo4j/kernel/impl/ha/IdAllocation.java\n+++ b/advanced/src/main/java/org/neo4j/kernel/impl/ha/IdAllocation.java\n@@ -1,11 +1,7 @@\n package org.neo4j.kernel.impl.ha;\n \n-import java.io.Serializable;\n-\n-public final class IdAllocation implements Serializable\n+public final class IdAllocation\n {\n-    private static final long serialVersionUID = 1L;\n-\n     private final long[] ids;\n     private final long highestIdInUse;\n     private final long defragCount;\ndiff --git a/advanced/src/main/java/org/neo4j/kernel/impl/ha/LockStatus.java b/advanced/src/main/java/org/neo4j/kernel/impl/ha/LockStatus.java\nindex d5ee652..2d3b307 100644\n--- a/advanced/src/main/java/org/neo4j/kernel/impl/ha/LockStatus.java\n+++ b/advanced/src/main/java/org/neo4j/kernel/impl/ha/LockStatus.java\n@@ -4,5 +4,17 @@ public enum LockStatus\n {\n     OK_LOCKED,\n     NOT_LOCKED,\n-    DEAD_LOCKED,\n+    DEAD_LOCKED\n+    {\n+        @Override\n+        public boolean hasMessage()\n+        {\n+            return true;\n+        }\n+    };\n+    \n+    public boolean hasMessage()\n+    {\n+        return false;\n+    }\n }\n", "truth": "Added a hasMessage to LockStatus"}, {"prompt": "diff --git a/src/java/org/apache/cassandra/service/CassandraDaemon.java b/src/java/org/apache/cassandra/service/CassandraDaemon.java\nindex f49d549..20c70e7 100644\n--- a/src/java/org/apache/cassandra/service/CassandraDaemon.java\n+++ b/src/java/org/apache/cassandra/service/CassandraDaemon.java\n@@ -157,7 +157,7 @@ public class CassandraDaemon\n         {\n             logger.warn(\"Non-Oracle JVM detected.  Some features, such as immediate unmap of compacted SSTables, may not work as intended\");\n         }\n-        else\n+     /*   else\n         {\n             String[] java_version = javaVersion.split(\"_\");\n             String java_major = java_version[0];\n@@ -172,18 +172,8 @@ public class CassandraDaemon\n                 logger.info(\"Unable to parse java version {}\", Arrays.toString(java_version));\n                 java_minor = 32;\n             }\n-            if (java_major.equals(\"1.6.0\"))\n-            {\n-                // These need to be updated from time to time, but these are currently valid (12.18.2012)\n-                if (java_minor < 29)\n-                    // Seen to be a major contributing factor for heap and load issues\n-                    logger.error(\"Your JVM is out of date. Please upgrade to the newest Oracle Java 6.\");\n-                else if (java_minor < 32)\n-                    // Updates 32+ have been seen to work well enough in the wild\n-                    logger.warn(\"Your JVM is out of date. Please upgrade to the newest Oracle Java 6.\");\n-            }\n         }\n-\n+     */\n         logger.info(\"Heap size: {}/{}\", Runtime.getRuntime().totalMemory(), Runtime.getRuntime().maxMemory());\n         logger.info(\"Classpath: {}\", System.getProperty(\"java.class.path\"));\n         CLibrary.tryMlockall();\n", "truth": "Remove jvm revision checks."}, {"prompt": "diff --git a/src/test/java/org/elasticsearch/index/translog/AbstractSimpleTranslogTests.java b/src/test/java/org/elasticsearch/index/translog/AbstractSimpleTranslogTests.java\nindex 521c7cc..71ad0c6 100644\n--- a/src/test/java/org/elasticsearch/index/translog/AbstractSimpleTranslogTests.java\n+++ b/src/test/java/org/elasticsearch/index/translog/AbstractSimpleTranslogTests.java\n@@ -20,6 +20,7 @@\n package org.elasticsearch.index.translog;\n \n import org.apache.lucene.index.Term;\n+import org.apache.lucene.util.LuceneTestCase;\n import org.elasticsearch.ElasticsearchException;\n import org.elasticsearch.common.bytes.BytesArray;\n import org.elasticsearch.common.io.stream.BytesStreamInput;\n@@ -413,6 +414,7 @@ public abstract class AbstractSimpleTranslogTests extends ElasticsearchTestCase\n     }\n \n     @Test\n+    @LuceneTestCase.AwaitsFix(bugUrl = \"corrupting size can cause OOME\")\n     public void testTranslogChecksums() throws Exception {\n         List<Translog.Location> locations = newArrayList();\n \n", "truth": "[TEST] add AwaitsFix for testTranslogChecksums since it may cause OOME"}, {"prompt": "diff --git a/platform/lang-impl/src/com/intellij/unscramble/AnalyzeStacktraceUtil.java b/platform/lang-impl/src/com/intellij/unscramble/AnalyzeStacktraceUtil.java\nindex 05dba03..6bd6c57 100644\n--- a/platform/lang-impl/src/com/intellij/unscramble/AnalyzeStacktraceUtil.java\n+++ b/platform/lang-impl/src/com/intellij/unscramble/AnalyzeStacktraceUtil.java\n@@ -62,9 +62,6 @@ public class AnalyzeStacktraceUtil {\n   public static void printStacktrace(final ConsoleView consoleView, final String unscrambledTrace) {\n     consoleView.clear();\n     consoleView.print(unscrambledTrace+\"\\n\", ConsoleViewContentType.ERROR_OUTPUT);\n-    if (consoleView instanceof ConsoleViewImpl) {\n-      ((ConsoleViewImpl)consoleView).foldImmediately();\n-    }\n     consoleView.scrollTo(0);\n   }\n \n", "truth": "do not fold immediately as console now works async"}, {"prompt": "diff --git a/platform/util/src/com/intellij/openapi/wm/FocusWatcher.java b/platform/util/src/com/intellij/openapi/wm/FocusWatcher.java\nindex 991c1f9..f921da4 100644\n--- a/platform/util/src/com/intellij/openapi/wm/FocusWatcher.java\n+++ b/platform/util/src/com/intellij/openapi/wm/FocusWatcher.java\n@@ -89,6 +89,7 @@ public class FocusWatcher implements ContainerListener,FocusListener{\n     if(getFocusedComponent() ==component){\n       setFocusedComponentImpl(null, cause);\n     }\n+    myTopComponent = null;\n   }\n \n   @Override\n", "truth": "reset FocusWatcher.myTopComponent to null"}, {"prompt": "diff --git a/library/src/main/java/com/orm/SugarDataSource.java b/library/src/main/java/com/orm/SugarDataSource.java\nindex 01e12d1..2aa2f8d 100644\n--- a/library/src/main/java/com/orm/SugarDataSource.java\n+++ b/library/src/main/java/com/orm/SugarDataSource.java\n@@ -346,7 +346,7 @@ public final class SugarDataSource<T> {\n         try {\n             count = future.get();\n \n-            if (null == count || count == 0) {\n+            if (null == count) {\n                 errorCallback.onError(new Exception(\"Error when performing delete of all elements\"));\n             } else {\n                 successCallback.onSuccess(count);\n", "truth": "modified count method"}, {"prompt": "diff --git a/OsmAnd/src/net/osmand/plus/activities/MapActivity.java b/OsmAnd/src/net/osmand/plus/activities/MapActivity.java\nindex dfd5ccbfac..1b4e6216f5 100644\n--- a/OsmAnd/src/net/osmand/plus/activities/MapActivity.java\n+++ b/OsmAnd/src/net/osmand/plus/activities/MapActivity.java\n@@ -602,7 +602,7 @@ public class MapActivity extends AccessibleActivity implements DownloadEvents,\n \t\t\tSystem.err.println(\"OnCreate for MapActivity took \" + (System.currentTimeMillis() - tm) + \" ms\");\n \t\t}\n \n-\t\tif (!permissionDone && !app.getAppInitializer().isFirstTime()) {\n+\t\tif (!permissionDone) {\n \t\t\tif (!permissionAsked) {\n \t\t\t\tif (app.isExternalStorageDirectoryReadOnly()\n \t\t\t\t\t\t&& getSupportFragmentManager().findFragmentByTag(DataStoragePlaceDialogFragment.TAG) == null) {\n", "truth": "Revert \"Skip permission and storage dialog first time\""}, {"prompt": "diff --git a/source/org/jivesoftware/smackx/packet/VCard.java b/source/org/jivesoftware/smackx/packet/VCard.java\nindex a0584240..7c4234a6 100644\n--- a/source/org/jivesoftware/smackx/packet/VCard.java\n+++ b/source/org/jivesoftware/smackx/packet/VCard.java\n@@ -356,6 +356,26 @@ public class VCard extends IQ {\n     }\n \n     /**\n+     * Specify the bytes for the avatar to use as well as the mime type.\n+     *\n+     * @param bytes the bytes of the avatar.\n+     * @param mimeType the mime type of the avatar.\n+     */\n+    public void setAvatar(byte[] bytes, String mimeType) {\n+        if (bytes == null) {\n+            // Remove avatar (if any) from mappings\n+            otherUnescapableFields.remove(\"PHOTO\");\n+            return;\n+        }\n+\n+        // Otherwise, add to mappings.\n+        String encodedImage = StringUtils.encodeBase64(bytes);\n+        avatar = encodedImage;\n+\n+        setField(\"PHOTO\", \"<TYPE>\" + mimeType + \"</TYPE><BINVAL>\" + encodedImage + \"</BINVAL>\", true);\n+    }\n+\n+    /**\n      * Set the encoded avatar string. This is used by the provider.\n      *\n      * @param encodedAvatar the encoded avatar string.\n", "truth": "Added ability to set mime type of avatar."}, {"prompt": "diff --git a/plugins/tasks/tasks-tests/test/com/intellij/tasks/vcs/TaskVcsTest.java b/plugins/tasks/tasks-tests/test/com/intellij/tasks/vcs/TaskVcsTest.java\nindex 998ced6..2542ec2 100644\n--- a/plugins/tasks/tasks-tests/test/com/intellij/tasks/vcs/TaskVcsTest.java\n+++ b/plugins/tasks/tasks-tests/test/com/intellij/tasks/vcs/TaskVcsTest.java\n@@ -479,7 +479,8 @@ public class TaskVcsTest extends CodeInsightFixtureTestCase {\n       myTaskManager = null;\n       myVcs = null;\n       myChangeListManager = null;\n+\n+      super.tearDown();\n     }\n-    super.tearDown();\n   }\n }\n", "truth": "invoke super.tearDown() in finally-block"}, {"prompt": "diff --git a/WordPress/src/main/java/org/wordpress/android/ui/people/PeopleListFragment.java b/WordPress/src/main/java/org/wordpress/android/ui/people/PeopleListFragment.java\nindex 61d075c97..551bc9316 100644\n--- a/WordPress/src/main/java/org/wordpress/android/ui/people/PeopleListFragment.java\n+++ b/WordPress/src/main/java/org/wordpress/android/ui/people/PeopleListFragment.java\n@@ -21,6 +21,7 @@ import org.wordpress.android.models.Person;\n import org.wordpress.android.ui.EmptyViewMessageType;\n import org.wordpress.android.ui.FilteredRecyclerView;\n import org.wordpress.android.ui.prefs.AppPrefs;\n+import org.wordpress.android.util.AppLog;\n import org.wordpress.android.util.GravatarUtils;\n import org.wordpress.android.util.StringUtils;\n import org.wordpress.android.widgets.WPNetworkImageView;\n@@ -69,6 +70,7 @@ public class PeopleListFragment extends Fragment {\n \n         mFilteredRecyclerView = (FilteredRecyclerView) rootView.findViewById(R.id.filtered_recycler_view);\n         mFilteredRecyclerView.addItemDecoration(new PeopleItemDecoration(getActivity(), R.drawable.people_list_divider));\n+        mFilteredRecyclerView.setLogT(AppLog.T.PEOPLE);\n \n         mFilteredRecyclerView.setFilterListener(new FilteredRecyclerView.FilterListener() {\n             @Override\n", "truth": "Set the logT for people list (also fixes the crash on filter change)"}, {"prompt": "diff --git a/liquibase-core/src/main/java/liquibase/command/ExecuteSqlCommand.java b/liquibase-core/src/main/java/liquibase/command/ExecuteSqlCommand.java\nindex e24adde0b..1834d5986 100644\n--- a/liquibase-core/src/main/java/liquibase/command/ExecuteSqlCommand.java\n+++ b/liquibase-core/src/main/java/liquibase/command/ExecuteSqlCommand.java\n@@ -1,6 +1,7 @@\n package liquibase.command;\n \n import liquibase.database.Database;\n+import liquibase.exception.LiquibaseException;\n import liquibase.executor.Executor;\n import liquibase.executor.ExecutorService;\n import liquibase.statement.core.RawSqlStatement;\n@@ -61,7 +62,11 @@ public class ExecuteSqlCommand extends AbstractCommand {\n         if (sqlFile == null) {\n             sqlText = sql;\n         } else {\n-             sqlText = FileUtil.getContents(new File(sqlFile));\n+            File file = new File(sqlFile);\n+            if (! file.exists()){\n+              throw new LiquibaseException(String.format(\"The file '%s' does not exist\", file.getCanonicalPath()));\n+            }\n+            sqlText = FileUtil.getContents(file);\n         }\n \n         String out = \"\";\n", "truth": "provide a better error message when a file doesn't exist"}, {"prompt": "diff --git a/vcs-api/src/com/intellij/openapi/vcs/changes/ChangeProvider.java b/vcs-api/src/com/intellij/openapi/vcs/changes/ChangeProvider.java\nindex 5b67932..95a7b51 100644\n--- a/vcs-api/src/com/intellij/openapi/vcs/changes/ChangeProvider.java\n+++ b/vcs-api/src/com/intellij/openapi/vcs/changes/ChangeProvider.java\n@@ -26,9 +26,13 @@ import com.intellij.openapi.vcs.VcsException;\n  */\n public interface ChangeProvider {\n   /**\n-   * Get changes from point of view of VCS. The vcs plugin should invoke\n+   * <p>Get changes from point of view of VCS. The vcs plugin should invoke\n    * methods on the {@code builder} object to report how changes in dirtyScope\n-   * map to VCS.\n+   * map to VCS.</p>\n+   *\n+   * <p>The implementations of this method should not report changes outside \n+   * of the dirty scope, but if these changes are reported, they will be\n+   * ingored by the caller.</p>\n    *\n    * @param dirtyScope a changes on the virtual file system\n    * @param builder a builder of VCS changes\n", "truth": "Clarified javadoc comment."}, {"prompt": "diff --git a/openid/src/main/java/org/springframework/security/openid/OpenID4JavaConsumer.java b/openid/src/main/java/org/springframework/security/openid/OpenID4JavaConsumer.java\nindex e9b4f8009..1a803af10 100644\n--- a/openid/src/main/java/org/springframework/security/openid/OpenID4JavaConsumer.java\n+++ b/openid/src/main/java/org/springframework/security/openid/OpenID4JavaConsumer.java\n@@ -57,8 +57,7 @@ public class OpenID4JavaConsumer implements OpenIDConsumer {\n     //~ Constructors ===================================================================================================\n \n     public OpenID4JavaConsumer() throws ConsumerException {\n-        this.consumerManager = new ConsumerManager();\n-        this.attributesToFetchFactory = new NullAxFetchListFactory();\n+        this(new ConsumerManager(), new NullAxFetchListFactory());\n     }\n \n     /**\n@@ -83,7 +82,12 @@ public class OpenID4JavaConsumer implements OpenIDConsumer {\n     }\n \n     public OpenID4JavaConsumer(AxFetchListFactory attributesToFetchFactory) throws ConsumerException {\n-        this.consumerManager = new ConsumerManager();\n+        this(new ConsumerManager(), attributesToFetchFactory);\n+    }\n+\n+    public OpenID4JavaConsumer(ConsumerManager consumerManager, AxFetchListFactory attributesToFetchFactory)\n+            throws ConsumerException {\n+        this.consumerManager = consumerManager;\n         this.attributesToFetchFactory = attributesToFetchFactory;\n     }\n \n", "truth": "Added extra constructor to OpenID4JavaConsumer which takes a ConsumerManager to allow a version compatible with GAE to be injected."}, {"prompt": "diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\nindex f96c605c05..df3fe20eb3 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java\n@@ -253,7 +253,9 @@ public class FileConsumer extends ScheduledPollConsumer {\n             return false;\n         } else if (endpoint.isIdempotent() && endpoint.getIdempotentRepository().contains(file.getPath())) {\n             // use file.getPath as key for the idempotent repository to support files with same name but in different folders\n-            LOG.warn(\"FileConsumer is idempotent and the file has been consumed before. Will skip this file: \" + file);\n+            if (LOG.isTraceEnabled()) {\n+                LOG.trace(\"FileConsumer is idempotent and the file has been consumed before. Will skip this file: \" + file);\n+            }\n             return false;\n         }\n \n", "truth": "Make the file consumer a bit quieter"}, {"prompt": "diff --git a/src/main/java/com/sk89q/worldedit/LocalWorld.java b/src/main/java/com/sk89q/worldedit/LocalWorld.java\nindex e9e65d05..9b594d1d 100644\n--- a/src/main/java/com/sk89q/worldedit/LocalWorld.java\n+++ b/src/main/java/com/sk89q/worldedit/LocalWorld.java\n@@ -23,6 +23,7 @@ import java.util.Random;\n import com.sk89q.worldedit.blocks.BaseBlock;\r\n import com.sk89q.worldedit.blocks.BaseItemStack;\r\n import com.sk89q.worldedit.blocks.BlockID;\r\n+import com.sk89q.worldedit.blocks.BlockType;\r\n import com.sk89q.worldedit.blocks.ItemType;\r\n import com.sk89q.worldedit.regions.Region;\r\n \r\n@@ -434,7 +435,7 @@ public abstract class LocalWorld {\n      * @return\r\n      */\r\n     public boolean isValidBlockType(int type) {\r\n-        return type >= 0 && type < 96;\r\n+        return BlockType.fromID(type) != null;\r\n     }\r\n \r\n     /**\r\ndiff --git a/src/main/java/com/sk89q/worldedit/bukkit/BukkitWorld.java b/src/main/java/com/sk89q/worldedit/bukkit/BukkitWorld.java\nindex dc162ed0..2584ee4c 100644\n--- a/src/main/java/com/sk89q/worldedit/bukkit/BukkitWorld.java\n+++ b/src/main/java/com/sk89q/worldedit/bukkit/BukkitWorld.java\n@@ -670,7 +670,7 @@ public class BukkitWorld extends LocalWorld {\n      */\r\n     @Override\r\n     public boolean isValidBlockType(int type) {\r\n-        return type <= 255 && (Material.getMaterial(type) != null || BlockType.fromID(type) != null); // Bukkit isn't always updated before WorldEdit is\r\n+        return type <= 255 && Material.getMaterial(type) != null;\r\n     }\r\n \r\n     @Override\r\n", "truth": "Reverted block id checking in BukkitWorld to prevent false positives and made LoclWorld use the internal list for easier updates"}, {"prompt": "diff --git a/ldap/src/main/java/org/springframework/security/ldap/authentication/PasswordComparisonAuthenticator.java b/ldap/src/main/java/org/springframework/security/ldap/authentication/PasswordComparisonAuthenticator.java\nindex dada87b39..c6fa530e1 100644\n--- a/ldap/src/main/java/org/springframework/security/ldap/authentication/PasswordComparisonAuthenticator.java\n+++ b/ldap/src/main/java/org/springframework/security/ldap/authentication/PasswordComparisonAuthenticator.java\n@@ -38,6 +38,8 @@ import org.springframework.util.Assert;\n  * <p>\n  * If passwords are stored in digest form in the repository, then a suitable {@link PasswordEncoder}\n  * implementation must be supplied. By default, passwords are encoded using the {@link LdapShaPasswordEncoder}.\n+ * Note that compare operations will not work if salted-SHA (SSHA) passwords are used, as it is not possible to\n+ * know the salt value which is a random byte sequence generated by the directory.\n  *\n  * @author Luke Taylor\n  * @version $Id$\n", "truth": "Added comment to Javadoc for PasswordComparisonAuthenticator to indicate that it won't work with SSHA passwords"}, {"prompt": "diff --git a/src/main/java/hex/nn/NNModel.java b/src/main/java/hex/nn/NNModel.java\nindex fbec04ca5..b421904ab 100644\n--- a/src/main/java/hex/nn/NNModel.java\n+++ b/src/main/java/hex/nn/NNModel.java\n@@ -500,6 +500,12 @@ public class NNModel extends Model {\n         else err.valid_mse = validErr;\n       }\n \n+      // remove thresholds from all the previous AUC results to keep output JSON small\n+      if (errors.length > 1) {\n+        if (errors[errors.length-1].trainAUC != null) errors[errors.length-1].trainAUC.thresholds = null;\n+        if (errors[errors.length-1].validAUC != null) errors[errors.length-1].validAUC.thresholds = null;\n+      }\n+\n       // only keep confusion matrices for the last step if there are fewer than specified number of output classes\n       if (err.train_confusion_matrix.cm != null\n               && err.train_confusion_matrix.cm.length >= model_info().get_params().max_confusion_matrix_size) {\n", "truth": "Only keep that latest AUC thresholds in the NN output JSON, to keep it small."}, {"prompt": "diff --git a/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java\nindex 73ce24e..531a0f3 100644\n--- a/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java\n+++ b/guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Stopwatch.java\n@@ -119,7 +119,8 @@ public final class Stopwatch {\n    * Creates (but does not start) a new stopwatch using {@link System#nanoTime}\n    * as its time source.\n    *\n-   * @deprecated Use {@link Stopwatch#createUnstarted()} instead.\n+   * @deprecated Use {@link Stopwatch#createUnstarted()} instead. This\n+   *     constructor is scheduled to be remove in Guava release 17.0.\n    */\n   @Deprecated\n   public Stopwatch() {\n@@ -130,7 +131,8 @@ public final class Stopwatch {\n    * Creates (but does not start) a new stopwatch, using the specified time\n    * source.\n    *\n-   * @deprecated Use {@link Stopwatch#createUnstarted(Ticker)} instead.\n+   * @deprecated Use {@link Stopwatch#createUnstarted(Ticker)} instead. This\n+   *     constructor is scheduled to be remove in Guava release 17.0.\n    */\n   @Deprecated\n   public Stopwatch(Ticker ticker) {\ndiff --git a/guava/src/com/google/common/base/Stopwatch.java b/guava/src/com/google/common/base/Stopwatch.java\nindex 1c0f534..f84ba48 100644\n--- a/guava/src/com/google/common/base/Stopwatch.java\n+++ b/guava/src/com/google/common/base/Stopwatch.java\n@@ -120,7 +120,8 @@ public final class Stopwatch {\n    * Creates (but does not start) a new stopwatch using {@link System#nanoTime}\n    * as its time source.\n    *\n-   * @deprecated Use {@link Stopwatch#createUnstarted()} instead.\n+   * @deprecated Use {@link Stopwatch#createUnstarted()} instead. This\n+   *     constructor is scheduled to be remove in Guava release 17.0.\n    */\n   @Deprecated\n   public Stopwatch() {\n@@ -131,7 +132,8 @@ public final class Stopwatch {\n    * Creates (but does not start) a new stopwatch, using the specified time\n    * source.\n    *\n-   * @deprecated Use {@link Stopwatch#createUnstarted(Ticker)} instead.\n+   * @deprecated Use {@link Stopwatch#createUnstarted(Ticker)} instead. This\n+   *     constructor is scheduled to be remove in Guava release 17.0.\n    */\n   @Deprecated\n   public Stopwatch(Ticker ticker) {\n", "truth": "Give removal dates for Stopwatch ctors."}, {"prompt": "diff --git a/presto-main/src/main/java/com/facebook/presto/server/PluginManager.java b/presto-main/src/main/java/com/facebook/presto/server/PluginManager.java\nindex 7d0eb26..6fa4ff5 100644\n--- a/presto-main/src/main/java/com/facebook/presto/server/PluginManager.java\n+++ b/presto-main/src/main/java/com/facebook/presto/server/PluginManager.java\n@@ -69,6 +69,7 @@ public class PluginManager\n             .add(\"com.fasterxml.jackson.annotation.\")\n             .add(\"io.airlift.slice.\")\n             .add(\"io.airlift.units.\")\n+            .add(\"org.openjdk.jol.\")\n             .build();\n \n     private static final Logger log = Logger.get(PluginManager.class);\n", "truth": "Add JOL to list of allowed SPI classes"}, {"prompt": "diff --git a/sql/src/main/java/io/crate/lucene/match/OptionParser.java b/sql/src/main/java/io/crate/lucene/match/OptionParser.java\nindex 09047c4ff..171555a11 100644\n--- a/sql/src/main/java/io/crate/lucene/match/OptionParser.java\n+++ b/sql/src/main/java/io/crate/lucene/match/OptionParser.java\n@@ -161,7 +161,7 @@ public class OptionParser {\n         if (fuzziness == null) {\n             return null;\n         }\n-        return Fuzziness.build(fuzziness);\n+        return Fuzziness.build(BytesRefs.toString(fuzziness));\n     }\n \n     private static MatchQuery.ZeroTermsQuery zeroTermsQuery(@Nullable Object zeroTermsQuery) {\ndiff --git a/sql/src/test/java/io/crate/integrationtests/TransportSQLActionTest.java b/sql/src/test/java/io/crate/integrationtests/TransportSQLActionTest.java\nindex 3f44a2ace..eb59750db 100644\n--- a/sql/src/test/java/io/crate/integrationtests/TransportSQLActionTest.java\n+++ b/sql/src/test/java/io/crate/integrationtests/TransportSQLActionTest.java\n@@ -29,8 +29,6 @@ import io.crate.TimestampFormat;\n import io.crate.action.sql.SQLActionException;\n import io.crate.core.collections.Bucket;\n import io.crate.exceptions.Exceptions;\n-import io.crate.exceptions.UnsupportedFeatureException;\n-import io.crate.test.CauseMatcher;\n import io.crate.testing.SQLBulkResponse;\n import io.crate.testing.TestingHelpers;\n import io.crate.testing.UseJdbc;\n@@ -1771,6 +1769,11 @@ public class TransportSQLActionTest extends SQLTransportIntegrationTest {\n         assertThat(TestingHelpers.printedTable(response.rows()),\n             is(\"End of the Galaxy| 1.1972358\\nAltair| 0.4790727\\nNorth West Ripple| 0.37037593\\nOuter Eastern Rim| 0.37037593\\n\"));\n \n+        execute(\"select name, _score from locations where match((kind, name_description_ft), 'galay') \" +\n+                \"using best_fields with (fuzziness='AUTO') order by _score desc\");\n+        assertThat(TestingHelpers.printedTable(response.rows()),\n+            is(\"End of the Galaxy| 1.1972358\\nAltair| 0.4790727\\nNorth West Ripple| 0.37037593\\nOuter Eastern Rim| 0.37037593\\n\"));\n+\n         execute(\"select name, _score from locations where match((kind, name_description_ft), 'gala') \" +\n                 \"using best_fields with (operator='or', minimum_should_match=2) order by _score desc\");\n         assertThat(TestingHelpers.printedTable(response.rows()),\n", "truth": "convert bytesrefs to string when creating the fuzziness conversion"}]}